"""
ü§ù MINISTERIO DE LA CONEXI√ìN (·π¢ilah)

Nombre Divino: Al-Wad≈´d (El Amoroso)
Pregunta Existencial: ¬øA qui√©n sirvo con mi presencia?

RESPONSABILIDADES:
- Gesti√≥n consciente de c√≠rculos relacionales
- Priorizaci√≥n seg√∫n estaci√≥n de vida
- Balance presencia vs productividad
- Necesidades relacionales por c√≠rculo
- Entrelazamiento proyectos-relaciones

FILOSOF√çA DE LA CONEXI√ìN SAGRADA:

"La conexi√≥n no es un recurso a gestionar.
 Es el tejido mismo de la existencia humana.
 Cada relaci√≥n es un espejo del Amado."

PRINCIPIO CENTRAL:
   PRESENCIA > PRODUCTIVIDAD
   
   Estar presente con un beb√© de 2 meses
   vale infinitamente m√°s que cualquier proyecto.

C√çRCULOS DE RELACI√ìN:

1. N√öCLEO FAMILIAR (Prioridad absoluta)
   ‚îî‚îÄ Beb√© (2 meses) ‚Üí Presencia constante, amor incondicional
   ‚îî‚îÄ Esposa/Pareja ‚Üí Apoyo activo, tiempo de calidad, co-creaci√≥n
   
   Necesidades espec√≠ficas:
   ‚Ä¢ Beb√©: Presencia f√≠sica, cuidado, juego, v√≠nculo
   ‚Ä¢ Esposa: Apoyo en proyectos, comida hecha, viajes, conversaci√≥n profunda
   
   Tiempo requerido: 60-70% del tiempo disponible
   Este NO es un "gasto". Es la INVERSI√ìN m√°s alta.

2. FAMILIA EXTENDIDA (Prioridad alta)
   ‚îî‚îÄ Padres ‚Üí Gratitud, visitas, apoyo
   ‚îî‚îÄ Hermano ‚Üí V√≠nculo, complicidad
   
   Necesidades: Tiempo de calidad, presencia en momentos importantes
   Frecuencia: Semanal/quincenal seg√∫n cercan√≠a geogr√°fica
   
3. AMIGOS CERCANOS (C√≠rculo √≠ntimo - 5 personas)
   ‚îî‚îÄ Relaciones profundas, vulnerabilidad, apoyo mutuo
   
   Necesidades: Conversaciones significativas, experiencias compartidas
   Frecuencia: Mensual/trimestral (calidad > cantidad)
   Potencial: Beta testers del Campo Sagrado

4. COLEGAS/PROFESIONAL (C√≠rculo colaborativo - 15 personas)
   ‚îî‚îÄ Proyectos en com√∫n, co-creaci√≥n, crecimiento mutuo
   
   Necesidades: Colaboraci√≥n efectiva, comunicaci√≥n clara
   Entrelazamiento: Proyectos sirven a relaciones, relaciones potencian proyectos
   Potencial: Adoptantes tempranos del sistema

ESTACI√ìN DE VIDA ACTUAL: PADRE DE BEB√â RECI√âN NACIDO

Esta estaci√≥n es **sagrada y temporal**. Requiere:

‚úì Aceptar reducci√≥n de productividad (es temporal)
‚úì Priorizar presencia sobre proyectos
‚úì Rechazar compromisos que comprometan n√∫cleo familiar
‚úì Pedir ayuda (familia, amigos)
‚úì Celebrar cada momento (nunca volver√°n a tener 2 meses)

Duraci√≥n: 0-12 meses (intensidad m√°xima)
          12-36 meses (intensidad alta)
          36+ meses (normalizaci√≥n gradual)

BALANCE RELACIONAL:

Para cada c√≠rculo, evaluar:
1. Tiempo invertido vs necesidad
2. Calidad de presencia (f√≠sica, mental, emocional)
3. Balance dar/recibir
4. Necesidades insatisfechas
5. Ajustes necesarios

M√âTRICAS DE SALUD:
1. Presencia familiar (0-100) - Tiempo de calidad con n√∫cleo
2. V√≠nculo extendido (0-100) - Conexi√≥n con familia/amigos
3. Colaboraci√≥n (0-100) - Efectividad con colegas
4. Generosidad relacional (0-100) - Dar sin expectativas

ALERTAS RELACIONALES:
‚ö†Ô∏è N√∫cleo familiar desatendido ‚Üí TODO LO DEM√ÅS ES SECUNDARIO
‚ö†Ô∏è Aislamiento social ‚Üí Pedir apoyo a c√≠rculo √≠ntimo
‚ö†Ô∏è Sobrecarga relacional ‚Üí Decir no a c√≠rculos externos

Referencia: core/arquitectura/MAPEO_7_MINISTERIOS.md
"""

from datetime import datetime, date, timedelta
from typing import Dict, Any, List, Optional
from enum import Enum
from ministerios import MinisterioBase


class CirculoRelacional(Enum):
    """C√≠rculos de relaci√≥n por prioridad"""
    NUCLEO_FAMILIAR = "nucleo_familiar"           # Prioridad absoluta
    FAMILIA_EXTENDIDA = "familia_extendida"       # Prioridad alta
    AMIGOS_CERCANOS = "amigos_cercanos"           # Prioridad moderada
    COLEGAS = "colegas"                           # Prioridad contextual


class EstacionVida(Enum):
    """Estaciones de vida que afectan prioridades"""
    PADRE_RECIEN_NACIDO = "padre_recien_nacido"   # 0-12 meses
    PADRE_INFANCIA = "padre_infancia"             # 1-5 a√±os
    CRECIMIENTO_PERSONAL = "crecimiento_personal"
    CUIDADOR = "cuidador"                         # Cuidando padres/familia
    EXPANSION = "expansion"                       # Enfoque en crecimiento


class TipoPresencia(Enum):
    """Tipos de presencia en relaciones"""
    FISICA = "fisica"                 # Estar ah√≠ f√≠sicamente
    MENTAL = "mental"                 # Atenci√≥n plena
    EMOCIONAL = "emocional"          # Apertura emocional
    INSTRUMENTAL = "instrumental"     # Apoyo pr√°ctico (hacer comida, etc.)


class MinisterioConexion(MinisterioBase):
    """
    ü§ù Ministerio de la Conexi√≥n - Al-Wad≈´d (El Amoroso)
    
    Gobierna las relaciones humanas: familia, amigos, colegas.
    Prioriza presencia sobre productividad en estaci√≥n de vida actual.
    """
    
    @property
    def nombre_divino(self) -> str:
        return "Al-Wad≈´d (El Amoroso)"
    
    @property
    def pregunta_existencial(self) -> str:
        return "¬øA qui√©n sirvo con mi presencia?"
    
    def estado_actual(self) -> Dict[str, Any]:
        """
        Reporta estado actual de las conexiones.
        
        Considera:
        - Estaci√≥n de vida (padre de beb√© de 2 meses)
        - Necesidades de cada c√≠rculo
        - Balance tiempo invertido vs requerido
        """
        # Estaci√≥n de vida actual
        estacion = EstacionVida.PADRE_RECIEN_NACIDO
        
        # Evaluar estado de cada c√≠rculo
        circulos = self._evaluar_circulos_relacionales()
        
        # Calcular salud relacional global
        salud_global = self._calcular_salud_relacional(circulos)
        
        return {
            "fecha": date.today().isoformat(),
            "estacion_vida": estacion.value,
            "prioridad_absoluta": "N√∫cleo familiar (beb√© 2 meses + esposa)",
            "circulos": circulos,
            "salud_relacional": salud_global,
            "recomendacion": self._generar_recomendacion_relacional(estacion, circulos)
        }
    
    def responder_a_decreto(self, decreto: Any) -> Dict[str, Any]:
        """
        Responde al decreto desde perspectiva relacional.
        
        Eval√∫a:
        - ¬øLa acci√≥n compromete tiempo con n√∫cleo familiar?
        - ¬øLa acci√≥n fortalece relaciones (proyecto con amigos/colegas)?
        - ¬øEs momento de pedir ayuda al c√≠rculo √≠ntimo?
        - ¬øLa acci√≥n est√° alineada con estaci√≥n de vida?
        """
        accion = decreto.accion_tangible.lower()
        
        # Evaluar impacto relacional
        impacto = self._evaluar_impacto_relacional(accion)
        
        # Evaluar entrelazamiento con proyectos
        entrelazamiento = self._evaluar_entrelazamiento_proyectos(accion)
        
        # Evaluar coherencia con estaci√≥n de vida
        coherencia_estacion = self._evaluar_coherencia_estacion_vida(
            accion,
            EstacionVida.PADRE_RECIEN_NACIDO
        )
        
        # Evaluar si puede involucrar a c√≠rculos (beta testing, colaboraci√≥n)
        oportunidad_conexion = self._identificar_oportunidad_conexion(accion)
        
        # Propuestas relacionales
        propuestas = self._generar_propuestas_relacionales(
            accion,
            impacto,
            entrelazamiento,
            coherencia_estacion,
            oportunidad_conexion
        )
        
        return {
            "evaluacion": "favorable" if coherencia_estacion >= 70 else "requiere_ajustes",
            "coherencia_estacion_vida": coherencia_estacion,
            "impacto_relacional": impacto,
            "entrelazamiento_proyectos": entrelazamiento,
            "oportunidad_conexion": oportunidad_conexion,
            "propuestas": propuestas,
            "alertas": self._generar_alertas_relacionales(impacto, coherencia_estacion)
        }
    
    def metricas_salud(self) -> Dict[str, float]:
        """
        M√©tricas de salud relacional.
        
        Por ahora son heur√≠sticas.
        TODO: Integrar con tracking real de tiempo con cada c√≠rculo.
        """
        # Heur√≠sticas basadas en estaci√≥n de vida
        presencia_familiar = self._estimar_presencia_familiar()
        vinculo_extendido = self._estimar_vinculo_extendido()
        colaboracion = self._estimar_colaboracion()
        generosidad = 75.0  # TODO: Tracking real de dar/recibir
        
        return {
            "presencia_familiar": presencia_familiar,
            "vinculo_extendido": vinculo_extendido,
            "colaboracion": colaboracion,
            "generosidad_relacional": generosidad
        }
    
    # =====================================================================
    # M√âTODOS INTERNOS: Gesti√≥n Relacional
    # =====================================================================
    
    def _evaluar_circulos_relacionales(self) -> Dict[str, Any]:
        """
        Eval√∫a estado de cada c√≠rculo relacional.
        """
        return {
            "nucleo_familiar": {
                "miembros": ["Beb√© (2 meses)", "Esposa"],
                "necesidad_tiempo": "60-70% del tiempo disponible",
                "necesidad_presencia": ["f√≠sica", "mental", "emocional", "instrumental"],
                "estado": "prioridad_maxima",
                "satisfaccion": 80.0,  # TODO: Tracking real
                "alertas": []
            },
            "familia_extendida": {
                "miembros": ["Padres", "Hermano"],
                "necesidad_frecuencia": "Semanal/quincenal",
                "estado": "sostenible",
                "satisfaccion": 70.0,
                "alertas": []
            },
            "amigos_cercanos": {
                "cantidad": 5,
                "tipo": "C√≠rculo √≠ntimo",
                "necesidad_frecuencia": "Mensual/trimestral",
                "potencial": "Beta testers Campo Sagrado",
                "estado": "sostenible",
                "satisfaccion": 65.0,
                "alertas": []
            },
            "colegas": {
                "cantidad": 15,
                "tipo": "C√≠rculo colaborativo",
                "entrelazamiento": "Proyectos en com√∫n",
                "potencial": "Adoptantes tempranos",
                "estado": "activo",
                "satisfaccion": 70.0,
                "alertas": []
            }
        }
    
    def _evaluar_impacto_relacional(self, accion: str) -> Dict[str, Any]:
        """
        Eval√∫a impacto de la acci√≥n en relaciones.
        """
        # Tiempo requerido (de Ministerio Capital/Mente)
        horas_estimadas = self._estimar_horas_accion(accion)
        
        # Momento del d√≠a
        hora_actual = datetime.now().hour
        
        # ¬øCompromete tiempo familiar cr√≠tico?
        if 18 <= hora_actual <= 22:  # Horario familia (tarde-noche)
            impacto_nucleo = "alto" if horas_estimadas > 2 else "moderado"
        elif 6 <= hora_actual <= 9:  # Horario ma√±ana (beb√© despierta)
            impacto_nucleo = "alto" if horas_estimadas > 1 else "moderado"
        else:
            impacto_nucleo = "bajo"
        
        return {
            "impacto_nucleo_familiar": impacto_nucleo,
            "horas_estimadas": horas_estimadas,
            "momento_dia": "familiar" if impacto_nucleo != "bajo" else "disponible",
            "requiere_coordinacion": impacto_nucleo != "bajo"
        }
    
    def _evaluar_entrelazamiento_proyectos(self, accion: str) -> Dict[str, Any]:
        """
        Eval√∫a si la acci√≥n entrelaza proyectos con relaciones.
        """
        # ¬øEs proyecto colaborativo?
        es_colaborativo = any(palabra in accion for palabra in [
            "equipo", "colaborar", "juntos", "compartir", "ense√±ar",
            "documentar para", "beta", "feedback"
        ])
        
        # ¬øPuede involucrar c√≠rculos?
        puede_involucrar = {
            "amigos": "beta testing" in accion or "probar" in accion,
            "colegas": "equipo" in accion or "colaborar" in accion,
            "esposa": "apoyo" in accion or "proyecto conjunto" in accion
        }
        
        nivel_entrelazamiento = "alto" if es_colaborativo else "bajo"
        
        return {
            "nivel": nivel_entrelazamiento,
            "es_colaborativo": es_colaborativo,
            "puede_involucrar": puede_involucrar,
            "potencial_conexion": any(puede_involucrar.values())
        }
    
    def _evaluar_coherencia_estacion_vida(
        self,
        accion: str,
        estacion: EstacionVida
    ) -> float:
        """
        Eval√∫a coherencia de la acci√≥n con estaci√≥n de vida actual.
        
        Padre de reci√©n nacido = prioridad absoluta a presencia familiar.
        """
        if estacion != EstacionVida.PADRE_RECIEN_NACIDO:
            return 70.0  # Otras estaciones tienen m√°s flexibilidad
        
        # Para padre de beb√© de 2 meses:
        horas = self._estimar_horas_accion(accion)
        
        # Acciones que fortalecen n√∫cleo familiar
        fortalece_nucleo = any(palabra in accion for palabra in [
            "familia", "beb√©", "esposa", "pareja", "descanso",
            "comida para", "apoyo", "cuidado"
        ])
        
        if fortalece_nucleo:
            return 100.0  # Perfectamente alineado
        
        # Acciones r√°pidas y flexibles
        if horas <= 2:
            return 80.0  # Aceptable
        
        # Inversiones en futuro (Campo Sagrado para organizar vida)
        es_inversion_organizativa = any(palabra in accion for palabra in [
            "organizar", "sistema", "automatizar", "optimizar tiempo"
        ])
        
        if es_inversion_organizativa:
            return 75.0  # Alineado a medio plazo
        
        # Proyectos grandes que requieren tiempo extenso
        if horas > 10:
            return 30.0  # Conflicto con estaci√≥n de vida
        
        # Default
        return 50.0
    
    def _identificar_oportunidad_conexion(self, accion: str) -> Dict[str, Any]:
        """
        Identifica oportunidades de involucrar c√≠rculos relacionales.
        """
        oportunidades = []
        
        # ¬øPuede ser beta tested por amigos?
        if any(palabra in accion for palabra in ["sistema", "app", "herramienta", "campo sagrado"]):
            oportunidades.append({
                "circulo": "amigos_cercanos",
                "accion": "Invitar a 1-2 amigos a beta testar",
                "beneficio": "Feedback + fortalecer v√≠nculo + servicio"
            })
        
        # ¬øPuede colaborar con colegas?
        if any(palabra in accion for palabra in ["proyecto", "desarrollo", "implementar"]):
            oportunidades.append({
                "circulo": "colegas",
                "accion": "Proponer como proyecto conjunto",
                "beneficio": "Co-creaci√≥n + aprendizaje mutuo"
            })
        
        # ¬øPuede apoyar proyecto de esposa?
        if any(palabra in accion for palabra in ["dise√±o", "web", "contenido", "marketing"]):
            oportunidades.append({
                "circulo": "esposa",
                "accion": "Ofrecer apoyo t√©cnico en sus proyectos",
                "beneficio": "Apoyo activo + tiempo juntos + co-creaci√≥n"
            })
        
        return {
            "hay_oportunidades": len(oportunidades) > 0,
            "cantidad": len(oportunidades),
            "oportunidades": oportunidades
        }
    
    def _generar_propuestas_relacionales(
        self,
        accion: str,
        impacto: Dict[str, Any],
        entrelazamiento: Dict[str, Any],
        coherencia: float,
        oportunidad: Dict[str, Any]
    ) -> List[str]:
        """
        Genera propuestas desde perspectiva relacional.
        """
        propuestas = []
        
        # Propuestas seg√∫n impacto en n√∫cleo
        if impacto["impacto_nucleo_familiar"] == "alto":
            propuestas.append("üë®‚Äçüë©‚Äçüë¶ ALTO IMPACTO FAMILIAR: Coordinar con esposa. ¬øPuede ser en horario beb√© duerme?")
            propuestas.append("üí° Considerar: ¬øEs urgente o puede esperar a tener apoyo familiar?")
        
        # Propuestas seg√∫n entrelazamiento
        if entrelazamiento["potencial_conexion"]:
            propuestas.append("ü§ù OPORTUNIDAD: Este proyecto puede fortalecer relaciones.")
            for circulo, puede in entrelazamiento["puede_involucrar"].items():
                if puede:
                    propuestas.append(f"   ‚Üí Involucrar {circulo}")
        
        # Propuestas seg√∫n coherencia con estaci√≥n
        if coherencia < 50:
            propuestas.append("‚ö†Ô∏è CONFLICTO CON ESTACI√ìN DE VIDA: Padre de beb√© de 2 meses.")
            propuestas.append("üí° Opciones: Posponer 6-12 meses o reducir scope dr√°sticamente")
        
        # Propuestas de oportunidades espec√≠ficas
        if oportunidad["hay_oportunidades"]:
            propuestas.append(f"‚ú® {oportunidad['cantidad']} OPORTUNIDAD(ES) DE CONEXI√ìN:")
            for op in oportunidad["oportunidades"]:
                propuestas.append(f"   ‚Üí {op['circulo']}: {op['accion']}")
        
        # Propuesta de ayuda familiar
        if impacto["horas_estimadas"] > 5:
            propuestas.append("üÜò CONSIDERA PEDIR AYUDA: Familia/amigos pueden apoyar con beb√©.")
        
        return propuestas
    
    def _generar_alertas_relacionales(
        self,
        impacto: Dict[str, Any],
        coherencia: float
    ) -> List[str]:
        """
        Genera alertas relacionales.
        """
        alertas = []
        
        if impacto["impacto_nucleo_familiar"] == "alto":
            alertas.append("üë®‚Äçüë©‚Äçüë¶ ALERTA: Alto impacto en tiempo familiar. PRIORIDAD ABSOLUTA al n√∫cleo.")
        
        if coherencia < 40:
            alertas.append("‚ö†Ô∏è ALERTA ESTACI√ìN DE VIDA: Conflicto grave con paternidad reciente.")
            alertas.append("üçº RECORDATORIO: Beb√© de 2 meses nunca volver√°. Esta ventana es sagrada.")
        
        return alertas
    
    def _calcular_salud_relacional(self, circulos: Dict[str, Any]) -> float:
        """
        Calcula salud relacional global.
        """
        # Ponderar por prioridad
        pesos = {
            "nucleo_familiar": 0.50,      # 50% del peso
            "familia_extendida": 0.20,    # 20%
            "amigos_cercanos": 0.15,      # 15%
            "colegas": 0.15               # 15%
        }
        
        salud = sum(
            circulos[circulo]["satisfaccion"] * peso
            for circulo, peso in pesos.items()
        )
        
        return salud
    
    def _generar_recomendacion_relacional(
        self,
        estacion: EstacionVida,
        circulos: Dict[str, Any]
    ) -> str:
        """
        Genera recomendaci√≥n relacional.
        """
        if estacion == EstacionVida.PADRE_RECIEN_NACIDO:
            return (
                "PRIORIDAD ABSOLUTA: N√∫cleo familiar (beb√© + esposa). "
                "Todo lo dem√°s es secundario y puede esperar. "
                "Aceptar reducci√≥n temporal de productividad. "
                "Pedir ayuda a c√≠rculos cuando sea necesario."
            )
        
        return "Mantener balance entre c√≠rculos relacionales."
    
    def _estimar_presencia_familiar(self) -> float:
        """
        Estima presencia con n√∫cleo familiar.
        
        En estaci√≥n padre reci√©n nacido, deber√≠a ser 60-70%.
        """
        # Heur√≠stica: si estaci√≥n es padre reci√©n nacido, asumimos presencia alta
        # TODO: Integrar con tracking real de tiempo
        return 75.0
    
    def _estimar_vinculo_extendido(self) -> float:
        """
        Estima v√≠nculo con familia extendida y amigos.
        """
        # Heur√≠stica
        return 70.0
    
    def _estimar_colaboracion(self) -> float:
        """
        Estima efectividad de colaboraci√≥n con colegas.
        """
        # Heur√≠stica
        return 75.0
    
    def _estimar_horas_accion(self, accion: str) -> float:
        """
        Estima horas requeridas para la acci√≥n.
        
        Reutiliza l√≥gica de Ministerio Capital.
        """
        if any(palabra in accion for palabra in ["implementar", "construir", "desarrollar", "sistema"]):
            return 20.0
        elif any(palabra in accion for palabra in ["crear", "dise√±ar", "escribir"]):
            return 5.0
        elif any(palabra in accion for palabra in ["revisar", "actualizar", "organizar"]):
            return 2.0
        else:
            return 3.0
