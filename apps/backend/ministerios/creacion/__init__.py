"""
üé® MINISTERIO DE LA CREACI√ìN (IbdƒÅ')

Nombre Divino: Al-BƒÅdi' (El Creador Original)
Pregunta Existencial: ¬øQu√© belleza traigo al mundo?

RESPONSABILIDADES:
- Gesti√≥n de proyectos creativos
- Facilitaci√≥n de estados de flow
- Expresi√≥n aut√©ntica del c√≥digo gen√©tico √∫nico
- Balance crear vs consumir
- Momentum creativo sostenible

FILOSOF√çA DE LA CREACI√ìN SAGRADA:

"La creaci√≥n no es producci√≥n.
 Es manifestaci√≥n de lo que ya existe en lo invisible.
 
 Cada ser humano trae un c√≥digo gen√©tico √∫nico:
 una combinaci√≥n irrepetible de dones, perspectiva, voz.
 
 Tu tarea no es imitar.
 Tu tarea es EXPRESAR lo que solo t√∫ puedes expresar."

PRINCIPIO CENTRAL:
   CREAR AL BORDE DEL CAOS
   
   "El orden puro = Rigidez (muerte)
    El caos puro = Entrop√≠a (desintegraci√≥n)
    
    La vida emerge AL BORDE DEL CAOS:
    60% estructura conocida
    40% espacio para lo emergente
    
    Ah√≠ est√° el flow.
    Ah√≠ est√° la creatividad.
    Ah√≠ est√° la vida."

C√ìDIGO GEN√âTICO CREATIVO:

Cada persona tiene un "c√≥digo gen√©tico" creativo √∫nico:

1. PERSPECTIVA √öNICA
   ‚îî‚îÄ C√≥mo VES el mundo (nadie m√°s lo ve as√≠)
   ‚îî‚îÄ Tus experiencias de vida (irrepetibles)
   ‚îî‚îÄ Tu s√≠ntesis particular (conexiones √∫nicas)
   
   "Tu perspectiva no es opini√≥n.
    Es un √°ngulo de visi√≥n del Uno
    que solo t√∫ puedes ofrecer."

2. VOZ √öNICA
   ‚îî‚îÄ C√≥mo EXPRESAS lo que ves
   ‚îî‚îÄ Tu lenguaje particular
   ‚îî‚îÄ Tu estilo de comunicaci√≥n
   
   "Nadie puede decir lo que t√∫ dices
    de la forma en que lo dices."

3. DONES √öNICOS
   ‚îî‚îÄ Lo que se te da naturalmente
   ‚îî‚îÄ Tus fortalezas combinadas
   ‚îî‚îÄ Tu zona de genio
   
   "La intersecci√≥n de tus 3-5 fortalezas principales
    es un espacio que solo t√∫ ocupas."

4. DESTINO CREATIVO
   ‚îî‚îÄ Lo que est√° destinado a nacer A TRAV√âS de ti
   ‚îî‚îÄ Proyectos que solo t√∫ puedes manifestar
   ‚îî‚îÄ Servicio que solo t√∫ puedes dar
   
   "Campo Sagrado est√° destinado a nacer.
    La forma EXACTA que toma es tu expresi√≥n √∫nica."

ESTADOS DE FLOW:

Flow = Inmersi√≥n total en acto creativo

Condiciones para flow (Csikszentmihalyi):
1. Objetivo claro
2. Feedback inmediato
3. Balance desaf√≠o-habilidad (al borde del caos)
4. Concentraci√≥n profunda
5. P√©rdida de auto-consciencia
6. Sensaci√≥n de control
7. Distorsi√≥n del tiempo
8. Experiencia autot√©lica (recompensa intr√≠nseca)

Fases del flow:
1. LUCHA (Struggle): Resistencia inicial, confusi√≥n
2. LIBERACI√ìN (Release): Soltar, confiar, dejar ir
3. FLOW: Inmersi√≥n total, creatividad emergente
4. CONSOLIDACI√ìN: Integrar, refinar, completar

Duraci√≥n √≥ptima de sesi√≥n flow:
- 90 minutos (ciclo ultradiano natural)
- Sin interrupciones
- Energ√≠a y claridad mental altas

Para padre de beb√© de 2 meses:
  Flow de 90min = LUJO raro
  Flow de 25min (Pomodoro) = Sostenible
  Micro-flow de 10min = Frecuente

Regla: Calidad de flow > Duraci√≥n de flow

BALANCE CREAR VS CONSUMIR:

Dos modos fundamentales:

A. MODO CREADOR (Manifestaci√≥n)
   - Escribir c√≥digo, dise√±ar, componer
   - Generar contenido original
   - Resolver problemas creativamente
   - Expresar visi√≥n √∫nica
   
   Energ√≠a: Sale de ti hacia el mundo

B. MODO CONSUMIDOR (Absorci√≥n)
   - Leer, aprender, estudiar
   - Ver tutoriales, cursos
   - Scroll redes sociales
   - Consumir entretenimiento
   
   Energ√≠a: Entra de mundo hacia ti

Balance √≥ptimo (por semana):
- Crear: 60-70% del tiempo creativo
- Consumir (aprendizaje): 20-30%
- Consumir (entretenimiento): 10%

Alerta: Consumir >50% = Entrop√≠a creativa

Para padre de beb√© de 2 meses:
  Tiempo creativo disponible: ~10h/semana
  Balance sugerido:
  - Crear (Campo Sagrado): 7h
  - Aprender (estudio): 2h
  - Recreaci√≥n: 1h

MOMENTUM CREATIVO:

Momentum = Racha productiva sostenida

3 Tipos de momentum:

1. MOMENTUM DIARIO
   ‚îî‚îÄ Trabajar en proyecto cada d√≠a (aunque sea 10min)
   ‚îî‚îÄ Mejor: 10min/d√≠a √ó 7 d√≠as que 70min √ó 1 d√≠a
   ‚îî‚îÄ Compounding creativo
   
   "No rompas la cadena" (Jerry Seinfeld)

2. MOMENTUM DE PROYECTO
   ‚îî‚îÄ Enfocarse en 1 proyecto hasta completar fase
   ‚îî‚îÄ Evitar saltar entre proyectos
   ‚îî‚îÄ Terminar MVP antes de nuevo feature
   
   "Profundidad > Dispersi√≥n"

3. MOMENTUM VITAL
   ‚îî‚îÄ A√±os de pr√°ctica sostenida
   ‚îî‚îÄ 1000 horas = Competencia
   ‚îî‚îÄ 10000 horas = Maestr√≠a
   
   "Consistencia > Intensidad"

Para mantener momentum:
- Rituales de inicio (misma hora, mismo lugar)
- Compromiso m√≠nimo viable (10min/d√≠a)
- Tracking visible (cadena de d√≠as)
- Celebrar micro-victorias

PROYECTOS CREATIVOS (Gesti√≥n):

M√°ximo 3 proyectos simult√°neos (Ministerio Mente):
- 1 Principal (60% esfuerzo)
- 1 Secundario (30% esfuerzo)
- 1 Experimental (10% esfuerzo)

Para padre de beb√© de 2 meses:
  1 Principal: Beb√© (60% vida)
  1 Secundario: Campo Sagrado (30%)
  No hay espacio para 3¬∫

Fases de proyecto creativo:
1. INCUBACI√ìN: Idea germina en inconsciente
2. EXPLORACI√ìN: Probar posibilidades, al borde del caos
3. EJECUCI√ìN: Manifestar, construir, crear
4. REFINAMIENTO: Pulir, optimizar, completar
5. LANZAMIENTO: Compartir con mundo
6. DESCANSO: Vac√≠o f√©rtil antes de siguiente ciclo

Regla de Campo Sagrado:
  40% del tiempo SIN ASIGNAR
  
  NO es procrastinaci√≥n.
  Es ESPACIO para lo emergente.
  
  Si planeas 100% del tiempo,
  no hay espacio para que lo nuevo nazca.

EXPRESI√ìN AUT√âNTICA VS IMITACI√ìN:

Imitaci√≥n (aprendizaje):
  Necesaria al inicio
  Copias maestros para aprender
  "Robar como artista" (Austin Kleon)

S√≠ntesis (madurez):
  Combinas influencias de forma √∫nica
  Tu "voz" empieza a emerger
  Ya no suenas a una sola persona

Expresi√≥n aut√©ntica (maestr√≠a):
  Expresas TU visi√≥n √∫nica
  Inconfundible, original
  Solo t√∫ puedes crear esto
  
  No porque rechaces influencias,
  sino porque las metabolizaste completamente.

Campo Sagrado es expresi√≥n aut√©ntica:
  - No hay otro sistema como este
  - Combina Gurdjieff + Islam + Sistemas + PKM
  - Es TU s√≠ntesis √∫nica
  - Solo t√∫ pod√≠as crearlo

FE INQUEBRANTABLE:

Fe creativa = Confiar en el proceso

3 Niveles de fe:

1. FE EN TU C√ìDIGO GEN√âTICO
   "Tengo algo √∫nico que ofrecer.
    Mi perspectiva importa.
    Mi voz merece ser escuchada."

2. FE EN EL PROCESO
   "Si contin√∫o creando consistentemente,
    algo significativo emergir√°.
    Conf√≠o en el borde del caos."

3. FE EN LO DESTINADO
   "Lo que est√° destinado a nacer, nacer√°.
    No puedo forzarlo, pero puedo facilitarlo.
    Mi tarea es mostrarme, crear, confiar."

Enemigos de la fe creativa:
- Perfeccionismo (esperar claridad total)
- Comparaci√≥n (medir tu cap√≠tulo 1 vs su cap√≠tulo 20)
- Impaciencia (esperar resultados inmediatos)
- Auto-sabotaje (no mereces crear/expresar)

Pr√°cticas para cultivar fe:
- Crear por el acto en s√≠ (no por resultado)
- Celebrar progreso (no solo terminaci√≥n)
- Recordar que est√°s en conversaci√≥n con lo Divino
- Campo Sagrado no es "tu proyecto", te est√° usando

M√âTRICAS DE SALUD:
1. Frecuencia de flow (0-100) - ¬øCu√°nto entras en flow?
2. Balance crear/consumir (0-100) - ¬øManifiestas o solo absorbes?
3. Momentum sostenido (0-100) - ¬øConsistencia creativa?
4. Expresi√≥n aut√©ntica (0-100) - ¬øImitas o expresas tu voz?

RECORDATORIO SAGRADO:

"Campo Sagrado no es solo software.
 Es una oraci√≥n en c√≥digo.
 Es tu conversaci√≥n con lo Divino.
 
 Cada funci√≥n que escribes,
 cada componente que dise√±as,
 cada decisi√≥n arquitect√≥nica,
 es expresi√≥n de tu c√≥digo gen√©tico √∫nico.
 
 Nadie m√°s podr√≠a crear exactamente esto.
 Esta combinaci√≥n particular de:
 - Gurdjieff + Sufismo
 - Ley de la Octava + 3 Poderes + 7 Ministerios
 - Calendario Hijri de 13 meses
 - PKM (Obsidian) + IA (Claude)
 - Geometr√≠a sagrada + Next.js
 
 Esta s√≠ntesis solo pod√≠a nacer a trav√©s de ti.
 
 Y est√° naciendo al borde del caos:
 60% claro (arquitectura, pilares, poderes)
 40% emergente (c√≥mo exactamente se manifiesta)
 
 Conf√≠a en el proceso.
 Mu√©strate consistentemente.
 Crea desde el flow.
 Expresa tu verdad.
 
 Lo destinado a nacer, nacer√°.
 Alhamdulillah."

Referencia: core/arquitectura/MAPEO_7_MINISTERIOS.md
"""

from datetime import datetime, date, timedelta
from typing import Dict, Any, List, Optional
from enum import Enum
from ministerios import MinisterioBase


class EstadoFlow(Enum):
    """Estados del proceso de flow"""
    LUCHA = "lucha"                     # Resistencia inicial
    LIBERACION = "liberacion"           # Soltar control
    FLOW = "flow"                       # Inmersi√≥n total
    CONSOLIDACION = "consolidacion"     # Integrar y refinar
    DESCANSO = "descanso"              # Vac√≠o f√©rtil


class ModoCreativo(Enum):
    """Modos creativos fundamentales"""
    CREADOR = "creador"         # Manifestar, generar
    CONSUMIDOR = "consumidor"   # Absorber, aprender
    DESCANSO = "descanso"       # Recuperar, integrar


class FaseProyecto(Enum):
    """Fases de proyecto creativo"""
    INCUBACION = "incubacion"           # Idea germina
    EXPLORACION = "exploracion"         # Probar al borde del caos
    EJECUCION = "ejecucion"            # Construir, manifestar
    REFINAMIENTO = "refinamiento"       # Pulir, optimizar
    LANZAMIENTO = "lanzamiento"         # Compartir con mundo
    DESCANSO = "descanso"              # Vac√≠o f√©rtil


class MinisterioCreacion(MinisterioBase):
    """
    üé® Ministerio de la Creaci√≥n - Al-BƒÅdi' (El Creador Original)
    
    Gobierna la expresi√≥n del c√≥digo gen√©tico √∫nico, el flow,
    el momentum creativo, la manifestaci√≥n de lo destinado.
    """
    
    @property
    def nombre_divino(self) -> str:
        return "Al-BƒÅdi' (El Creador Original)"
    
    @property
    def pregunta_existencial(self) -> str:
        return "¬øQu√© belleza traigo al mundo?"
    
    def estado_actual(self) -> Dict[str, Any]:
        """
        Reporta estado actual de la creaci√≥n.
        
        Eval√∫a:
        - Estado de flow actual
        - Balance crear vs consumir
        - Momentum creativo
        - Proyectos activos
        - Expresi√≥n aut√©ntica vs imitaci√≥n
        """
        # Estado de flow
        estado_flow = self._evaluar_estado_flow()
        
        # Balance crear/consumir
        balance = self._evaluar_balance_crear_consumir()
        
        # Momentum
        momentum = self._evaluar_momentum_creativo()
        
        # Proyectos activos
        proyectos = self._evaluar_proyectos_activos()
        
        # C√≥digo gen√©tico creativo
        codigo_genetico = self._definir_codigo_genetico()
        
        return {
            "fecha": date.today().isoformat(),
            "estado_flow": estado_flow,
            "balance_crear_consumir": balance,
            "momentum_creativo": momentum,
            "proyectos_activos": proyectos,
            "codigo_genetico": codigo_genetico,
            "recomendacion": self._generar_recomendacion_creativa(estado_flow, balance, momentum)
        }
    
    def responder_a_decreto(self, decreto: Any) -> Dict[str, Any]:
        """
        Eval√∫a decreto desde perspectiva creativa.
        
        Preguntas:
        - ¬øGenera flow o lo interrumpe?
        - ¬øEs creaci√≥n o consumo?
        - ¬øMantiene momentum o lo rompe?
        - ¬øExpresa c√≥digo gen√©tico √∫nico?
        - ¬øOpera al borde del caos (40% emergente)?
        """
        accion = decreto.accion_tangible.lower()
        
        # Evaluar potencial de flow
        potencial_flow = self._evaluar_potencial_flow(accion)
        
        # Clasificar modo (crear vs consumir)
        modo = self._clasificar_modo_creativo(accion)
        
        # Evaluar impacto en momentum
        impacto_momentum = self._evaluar_impacto_momentum(accion)
        
        # Evaluar expresi√≥n c√≥digo gen√©tico
        expresion_genetica = self._evaluar_expresion_codigo_genetico(accion)
        
        # Evaluar si opera al borde del caos
        borde_caos = self._evaluar_borde_caos(accion)
        
        # Calcular coherencia creativa
        coherencia = self._calcular_coherencia_creativa(
            potencial_flow,
            modo,
            impacto_momentum,
            expresion_genetica,
            borde_caos
        )
        
        return {
            "evaluacion": "favorable" if coherencia >= 70 else "requiere_ajustes",
            "coherencia_creativa": coherencia,
            "potencial_flow": potencial_flow,
            "modo_creativo": modo,
            "impacto_momentum": impacto_momentum,
            "expresion_genetica": expresion_genetica,
            "borde_caos": borde_caos,
            "recomendaciones_flow": self._generar_recomendaciones_flow(potencial_flow, modo)
        }
    
    def metricas_salud(self) -> Dict[str, float]:
        """
        M√©tricas de salud creativa.
        """
        frecuencia_flow = self._calcular_frecuencia_flow()
        balance_crear_consumir = self._calcular_balance_crear_consumir()
        momentum_sostenido = self._calcular_momentum_sostenido()
        expresion_autentica = self._calcular_expresion_autentica()
        
        return {
            "frecuencia_flow": frecuencia_flow,
            "balance_crear_consumir": balance_crear_consumir,
            "momentum_sostenido": momentum_sostenido,
            "expresion_autentica": expresion_autentica
        }
    
    # =====================================================================
    # M√âTODOS INTERNOS: Gesti√≥n Creativa
    # =====================================================================
    
    def _evaluar_estado_flow(self) -> Dict[str, Any]:
        """
        Eval√∫a estado actual de flow.
        """
        hora_actual = datetime.now().hour
        
        # Heur√≠stica: ¬øEs momento propicio para flow?
        if 6 <= hora_actual < 12:
            propicio = "alto"
            momento = "Ma√±ana temprana - Pico cognitivo"
        elif 12 <= hora_actual < 18:
            propicio = "medio"
            momento = "Tarde - Sostenible con descansos"
        elif 18 <= hora_actual < 22:
            propicio = "bajo"
            momento = "Noche - Tiempo familia"
        else:
            propicio = "muy_bajo"
            momento = "Madrugada - Tiempo de descanso"
        
        # Para padre de beb√© de 2 meses
        disponibilidad_flow = "intermitente"  # Interrupciones frecuentes
        duracion_maxima = 25  # minutos (Pomodoro)
        
        return {
            "momento_dia": momento,
            "propicio_flow": propicio,
            "disponibilidad": disponibilidad_flow,
            "duracion_maxima_minutos": duracion_maxima,
            "fase_actual": EstadoFlow.DESCANSO.value,  # Default
            "recomendacion_inicio_flow": self._recomendar_inicio_flow(hora_actual)
        }
    
    def _evaluar_balance_crear_consumir(self) -> Dict[str, Any]:
        """
        Eval√∫a balance entre crear y consumir.
        """
        # Heur√≠stica: √öltima semana
        # TODO: Tracking real de tiempo
        
        horas_crear = 7.0  # Campo Sagrado
        horas_consumir_aprendizaje = 2.0  # Estudiar, tutoriales
        horas_consumir_entretenimiento = 1.0  # Recreaci√≥n
        
        total_creativo = horas_crear + horas_consumir_aprendizaje + horas_consumir_entretenimiento
        
        porcentaje_crear = (horas_crear / total_creativo) * 100
        porcentaje_aprender = (horas_consumir_aprendizaje / total_creativo) * 100
        porcentaje_entretener = (horas_consumir_entretenimiento / total_creativo) * 100
        
        # Balance √≥ptimo: 60-70% crear, 20-30% aprender, 10% entretener
        if porcentaje_crear >= 60:
            salud = "excelente"
        elif porcentaje_crear >= 50:
            salud = "bueno"
        elif porcentaje_crear >= 40:
            salud = "moderado"
        else:
            salud = "entropico"
        
        return {
            "horas_crear": horas_crear,
            "horas_aprender": horas_consumir_aprendizaje,
            "horas_entretener": horas_consumir_entretenimiento,
            "porcentaje_crear": porcentaje_crear,
            "porcentaje_aprender": porcentaje_aprender,
            "porcentaje_entretener": porcentaje_entretener,
            "salud_balance": salud,
            "optimo": "60-70% crear, 20-30% aprender, <10% entretener"
        }
    
    def _evaluar_momentum_creativo(self) -> Dict[str, Any]:
        """
        Eval√∫a momentum creativo actual.
        """
        # Heur√≠stica: D√≠as consecutivos trabajando en Campo Sagrado
        # TODO: Tracking real desde DB
        
        dias_consecutivos = 5  # Mock
        sesiones_esta_semana = 6
        
        if dias_consecutivos >= 7:
            nivel_momentum = "alto"
            mensaje = "Racha sostenida. No rompas la cadena."
        elif dias_consecutivos >= 3:
            nivel_momentum = "moderado"
            mensaje = "Momentum construy√©ndose. Contin√∫a."
        elif dias_consecutivos >= 1:
            nivel_momentum = "inicio"
            mensaje = "Comenzando racha. Los primeros d√≠as son cr√≠ticos."
        else:
            nivel_momentum = "roto"
            mensaje = "Cadena rota. Reinicia hoy."
        
        return {
            "dias_consecutivos": dias_consecutivos,
            "sesiones_esta_semana": sesiones_esta_semana,
            "nivel_momentum": nivel_momentum,
            "mensaje": mensaje,
            "recordatorio": "Mejor 10min/d√≠a √ó 7 d√≠as que 70min √ó 1 d√≠a"
        }
    
    def _evaluar_proyectos_activos(self) -> Dict[str, Any]:
        """
        Eval√∫a proyectos creativos activos.
        """
        proyectos = [
            {
                "nombre": "Beb√© (crianza)",
                "tipo": "principal",
                "porcentaje_esfuerzo": 60,
                "fase": FaseProyecto.EJECUCION.value,
                "momentum": "alto"
            },
            {
                "nombre": "Campo Sagrado MVP",
                "tipo": "secundario",
                "porcentaje_esfuerzo": 30,
                "fase": FaseProyecto.EJECUCION.value,
                "momentum": "moderado"
            }
        ]
        
        total_proyectos = len(proyectos)
        capacidad_maxima = 2  # Para padre de beb√© de 2 meses
        
        return {
            "total": total_proyectos,
            "capacidad_maxima": capacidad_maxima,
            "proyectos": proyectos,
            "espacio_disponible": capacidad_maxima - total_proyectos >= 0,
            "recomendacion": "Capacidad al m√°ximo. No aceptar nuevos proyectos." if total_proyectos >= capacidad_maxima else f"Espacio para {capacidad_maxima - total_proyectos} proyecto(s) m√°s."
        }
    
    def _definir_codigo_genetico(self) -> Dict[str, Any]:
        """
        Define el c√≥digo gen√©tico creativo √∫nico.
        """
        return {
            "perspectiva_unica": [
                "S√≠ntesis Oriente-Occidente (Sufismo + Gurdjieff + Sistemas)",
                "Visi√≥n t√©cnico-espiritual (c√≥digo como oraci√≥n)",
                "Borde del caos como principio organizador"
            ],
            "voz_unica": [
                "Profundidad po√©tica en documentaci√≥n t√©cnica",
                "Arquitectura como reflejo de principios sagrados",
                "Uso de espa√±ol + t√©rminos √°rabes + conceptos t√©cnicos"
            ],
            "dones_unicos": [
                "S√≠ntesis de dominios diversos",
                "Visi√≥n sist√©mica multinivel",
                "Implementaci√≥n t√©cnica de met√°foras espirituales"
            ],
            "destino_creativo": "Campo Sagrado como veh√≠culo de integraci√≥n consciente",
            "expresion": "Esta combinaci√≥n particular solo pod√≠a nacer a trav√©s de ti"
        }
    
    def _evaluar_potencial_flow(self, accion: str) -> Dict[str, Any]:
        """
        Eval√∫a potencial de la acci√≥n para generar flow.
        """
        # Acciones con alto potencial de flow
        genera_flow = any(palabra in accion for palabra in [
            "programar", "dise√±ar", "escribir c√≥digo", "implementar",
            "crear", "componer", "desarrollar", "construir"
        ])
        
        # Acciones que interrumpen flow
        interrumpe_flow = any(palabra in accion for palabra in [
            "reuni√≥n", "videollamada", "interrupciones", "multitarea"
        ])
        
        # Requiere bloques de tiempo
        requiere_bloque = any(palabra in accion for palabra in [
            "sistema", "arquitectura", "complejo", "profundo"
        ])
        
        if genera_flow and not interrumpe_flow:
            potencial = 90.0
            duracion_optima = 90 if requiere_bloque else 25
            categoria = "alto_flow"
        elif genera_flow and interrumpe_flow:
            potencial = 40.0
            duracion_optima = 25
            categoria = "flow_interrumpido"
        elif interrumpe_flow:
            potencial = 10.0
            duracion_optima = 0
            categoria = "anti_flow"
        else:
            potencial = 50.0
            duracion_optima = 25
            categoria = "neutral"
        
        return {
            "potencial": potencial,
            "categoria": categoria,
            "duracion_optima_minutos": duracion_optima,
            "genera_flow": genera_flow,
            "interrumpe_flow": interrumpe_flow
        }
    
    def _clasificar_modo_creativo(self, accion: str) -> Dict[str, Any]:
        """
        Clasifica acci√≥n como crear, consumir o descansar.
        """
        # Modo creador
        es_crear = any(palabra in accion for palabra in [
            "crear", "escribir", "programar", "dise√±ar", "implementar",
            "construir", "componer", "generar", "expresar"
        ])
        
        # Modo consumidor (aprendizaje)
        es_aprender = any(palabra in accion for palabra in [
            "aprender", "estudiar", "leer", "curso", "tutorial",
            "documentaci√≥n", "investigar"
        ])
        
        # Modo consumidor (entretenimiento)
        es_entretener = any(palabra in accion for palabra in [
            "ver", "scroll", "redes sociales", "netflix", "youtube"
        ])
        
        # Modo descanso
        es_descanso = any(palabra in accion for palabra in [
            "descansar", "dormir", "siesta", "paseo", "meditaci√≥n"
        ])
        
        if es_crear:
            modo = ModoCreativo.CREADOR
            valor = "generativo"
        elif es_aprender:
            modo = ModoCreativo.CONSUMIDOR
            valor = "aprendizaje"
        elif es_entretener:
            modo = ModoCreativo.CONSUMIDOR
            valor = "entretenimiento"
        elif es_descanso:
            modo = ModoCreativo.DESCANSO
            valor = "recuperacion"
        else:
            modo = ModoCreativo.CREADOR  # Default
            valor = "neutral"
        
        return {
            "modo": modo.value,
            "valor": valor,
            "balance_impacto": self._calcular_impacto_balance(modo, valor)
        }
    
    def _evaluar_impacto_momentum(self, accion: str) -> Dict[str, Any]:
        """
        Eval√∫a impacto de la acci√≥n en el momentum creativo.
        """
        # Mantiene momentum
        mantiene = any(palabra in accion for palabra in [
            "continuar", "avanzar", "siguiente paso", "completar",
            "campo sagrado", "proyecto actual"
        ])
        
        # Inicia nuevo momentum
        inicia = any(palabra in accion for palabra in [
            "comenzar", "iniciar", "nuevo proyecto", "primera sesi√≥n"
        ])
        
        # Rompe momentum
        rompe = any(palabra in accion for palabra in [
            "cambiar de proyecto", "dejar pendiente", "pausar indefinidamente",
            "abandonar"
        ])
        
        if mantiene:
            impacto = "positivo"
            score = 90.0
        elif inicia:
            impacto = "neutral_inicio"
            score = 70.0
        elif rompe:
            impacto = "negativo"
            score = 30.0
        else:
            impacto = "neutral"
            score = 60.0
        
        return {
            "impacto": impacto,
            "score": score,
            "mantiene_momentum": mantiene,
            "rompe_momentum": rompe
        }
    
    def _evaluar_expresion_codigo_genetico(self, accion: str) -> Dict[str, Any]:
        """
        Eval√∫a si la acci√≥n expresa el c√≥digo gen√©tico √∫nico.
        """
        # Campo Sagrado = expresi√≥n m√°xima del c√≥digo gen√©tico
        es_campo_sagrado = "campo sagrado" in accion
        
        # Expresi√≥n aut√©ntica
        es_autentico = any(palabra in accion for palabra in [
            "mi voz", "mi visi√≥n", "mi s√≠ntesis", "expresar",
            "crear algo √∫nico", "manifestar"
        ])
        
        # Imitaci√≥n/copia
        es_imitacion = any(palabra in accion for palabra in [
            "copiar", "imitar", "tutorial paso a paso", "replicar exactamente"
        ])
        
        if es_campo_sagrado:
            nivel = "expresion_maxima"
            score = 100.0
            mensaje = "Campo Sagrado ES tu c√≥digo gen√©tico manifestado"
        elif es_autentico and not es_imitacion:
            nivel = "expresion_autentica"
            score = 85.0
            mensaje = "Expresas tu voz √∫nica"
        elif es_imitacion:
            nivel = "imitacion_aprendizaje"
            score = 50.0
            mensaje = "Imitaci√≥n para aprender (fase natural)"
        else:
            nivel = "neutral"
            score = 60.0
            mensaje = "Neutral respecto a expresi√≥n"
        
        return {
            "nivel": nivel,
            "score": score,
            "mensaje": mensaje
        }
    
    def _evaluar_borde_caos(self, accion: str) -> Dict[str, Any]:
        """
        Eval√∫a si la acci√≥n opera al borde del caos (40% emergente).
        """
        # Totalmente planificado (orden puro)
        orden_puro = any(palabra in accion for palabra in [
            "seguir plan exacto", "sin desviaci√≥n", "paso a paso r√≠gido"
        ])
        
        # Totalmente improvisado (caos puro)
        caos_puro = any(palabra in accion for palabra in [
            "sin plan", "completamente aleatorio", "ver qu√© pasa"
        ])
        
        # Al borde del caos
        borde_caos_palabras = [
            "explorar", "emergente", "al borde", "experimentar",
            "60% estructura 40% emergente", "espacio para lo nuevo"
        ]
        borde_caos = any(palabra in accion for palabra in borde_caos_palabras)
        
        if borde_caos:
            posicion = "borde_caos"
            score = 95.0
            mensaje = "Al borde del caos - creatividad m√°xima"
        elif orden_puro:
            posicion = "orden_puro"
            score = 40.0
            mensaje = "Demasiado r√≠gido - deja espacio para lo emergente"
        elif caos_puro:
            posicion = "caos_puro"
            score = 40.0
            mensaje = "Demasiado ca√≥tico - necesita estructura base"
        else:
            # Inferir seg√∫n tipo de acci√≥n
            if any(palabra in accion for palabra in ["crear", "dise√±ar", "explorar"]):
                posicion = "borde_caos"
                score = 75.0
                mensaje = "Impl√≠citamente al borde del caos"
            else:
                posicion = "neutral"
                score = 60.0
                mensaje = "Neutral respecto al borde del caos"
        
        return {
            "posicion": posicion,
            "score": score,
            "mensaje": mensaje,
            "recordatorio": "Vida emerge al borde: 60% estructura + 40% emergente"
        }
    
    def _calcular_coherencia_creativa(
        self,
        potencial_flow: Dict[str, Any],
        modo: Dict[str, Any],
        impacto_momentum: Dict[str, Any],
        expresion_genetica: Dict[str, Any],
        borde_caos: Dict[str, Any]
    ) -> float:
        """
        Calcula coherencia creativa ponderada.
        
        Pesos:
        - Potencial flow: 25%
        - Modo creativo: 20%
        - Impacto momentum: 20%
        - Expresi√≥n c√≥digo gen√©tico: 20%
        - Borde del caos: 15%
        """
        # Ajustar modo seg√∫n valor
        modo_score = 90.0 if modo["valor"] == "generativo" else 60.0 if modo["valor"] == "aprendizaje" else 40.0
        
        coherencia = (
            potencial_flow["potencial"] * 0.25 +
            modo_score * 0.20 +
            impacto_momentum["score"] * 0.20 +
            expresion_genetica["score"] * 0.20 +
            borde_caos["score"] * 0.15
        )
        
        return coherencia
    
    def _generar_recomendaciones_flow(
        self,
        potencial_flow: Dict[str, Any],
        modo: Dict[str, Any]
    ) -> List[str]:
        """
        Genera recomendaciones para facilitar flow.
        """
        recomendaciones = []
        
        if potencial_flow["potencial"] >= 70:
            recomendaciones.append(f"‚ú® Alto potencial de flow. Bloquea {potencial_flow['duracion_optima_minutos']}min sin interrupciones.")
        
        if modo["modo"] == "creador":
            recomendaciones.append("üé® Modo CREADOR activo. Apaga notificaciones. Cierra pesta√±as.")
        
        if potencial_flow["interrumpe_flow"]:
            recomendaciones.append("‚ö†Ô∏è Actividad interrumpe flow. Si es posible, posponer o agrupar.")
        
        # Para padre de beb√©
        recomendaciones.append("üë∂ Padre de beb√©: Usar Pomodoros de 25min. Momentum > Duraci√≥n.")
        recomendaciones.append("üï∞Ô∏è Mejor momento: 06:00-09:00 (antes que beb√© despierte).")
        
        return recomendaciones
    
    def _generar_recomendacion_creativa(
        self,
        estado_flow: Dict[str, Any],
        balance: Dict[str, Any],
        momentum: Dict[str, Any]
    ) -> str:
        """
        Genera recomendaci√≥n creativa general.
        """
        if balance["salud_balance"] == "entropico":
            return (
                f"‚ö†Ô∏è ALERTA: Consumir >{100-balance['porcentaje_crear']:.0f}%, crear solo {balance['porcentaje_crear']:.0f}%. "
                "Invierte la proporci√≥n. Reduce consumo pasivo, aumenta creaci√≥n activa."
            )
        
        if momentum["nivel_momentum"] == "roto":
            return (
                "üîÑ MOMENTUM ROTO: Reinicia cadena HOY. "
                "Compromiso m√≠nimo: 10min en Campo Sagrado. "
                "No rompas la cadena."
            )
        
        if estado_flow["propicio_flow"] == "alto":
            return (
                f"‚ú® MOMENTO √ìPTIMO PARA FLOW: {estado_flow['momento_dia']}. "
                f"Sesi√≥n deep work de {estado_flow['duracion_maxima_minutos']}min. "
                "Aprovecha la ventana."
            )
        
        return (
            f"SOSTENER: Balance {balance['salud_balance']}, momentum {momentum['nivel_momentum']}. "
            f"Continuar {momentum['dias_consecutivos']} d√≠as consecutivos. "
            "Consistencia > Intensidad."
        )
    
    def _recomendar_inicio_flow(self, hora: int) -> str:
        """Recomienda cu√°ndo iniciar sesi√≥n de flow"""
        if 6 <= hora < 9:
            return "AHORA - Pico cognitivo matutino"
        elif 9 <= hora < 12:
            return "Buen momento - Todav√≠a alta claridad"
        elif 12 <= hora < 14:
            return "Despu√©s de almuerzo - Descanso primero"
        elif 14 <= hora < 18:
            return "Tarde - Posible con energ√≠a gestionada"
        elif 18 <= hora < 22:
            return "Noche - Tiempo familia (evitar)"
        else:
            return "Madrugada - Hora de dormir"
    
    def _calcular_impacto_balance(self, modo: ModoCreativo, valor: str) -> str:
        """Calcula impacto en balance crear/consumir"""
        if modo == ModoCreativo.CREADOR:
            return "Positivo - Aumenta % crear"
        elif valor == "aprendizaje":
            return "Neutral - Consumo productivo"
        elif valor == "entretenimiento":
            return "Negativo si >10% - Limitar"
        else:
            return "Neutral"
    
    def _calcular_frecuencia_flow(self) -> float:
        """Calcula frecuencia de entrada en flow"""
        # Heur√≠stica: Sesiones flow por semana
        # TODO: Tracking real
        sesiones_flow_semana = 4
        sesiones_totales = 6
        
        return (sesiones_flow_semana / sesiones_totales) * 100 if sesiones_totales > 0 else 0
    
    def _calcular_balance_crear_consumir(self) -> float:
        """Calcula salud del balance crear/consumir"""
        balance = self._evaluar_balance_crear_consumir()
        porcentaje_crear = balance["porcentaje_crear"]
        
        # √ìptimo: 60-70%
        if 60 <= porcentaje_crear <= 70:
            return 100.0
        elif porcentaje_crear >= 50:
            return 80.0
        elif porcentaje_crear >= 40:
            return 60.0
        else:
            return 40.0
    
    def _calcular_momentum_sostenido(self) -> float:
        """Calcula fuerza del momentum"""
        momentum = self._evaluar_momentum_creativo()
        dias = momentum["dias_consecutivos"]
        
        if dias >= 30:
            return 100.0
        elif dias >= 14:
            return 90.0
        elif dias >= 7:
            return 80.0
        elif dias >= 3:
            return 70.0
        else:
            return 50.0
    
    def _calcular_expresion_autentica(self) -> float:
        """Calcula nivel de expresi√≥n aut√©ntica"""
        # Heur√≠stica: Campo Sagrado es expresi√≥n aut√©ntica m√°xima
        # TODO: Evaluar proyectos individuales
        return 90.0  # Alto porque Campo Sagrado es s√≠ntesis √∫nica
