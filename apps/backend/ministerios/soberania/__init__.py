"""
üõ°Ô∏è MINISTERIO DE LA SOBERAN√çA (Mulk)

Nombre Divino: Al-MƒÅlik (El Rey Soberano)
Pregunta Existencial: ¬øD√≥nde est√°n mis l√≠mites sagrados?

RESPONSABILIDADES:
- Establecer l√≠mites claros en cada nivel
- Decir NO con amor y claridad
- Proteger energ√≠a vital de demandas externas
- Auto-liderazgo consciente
- Liberaci√≥n de compromisos que no sirven

FILOSOF√çA DE LA SOBERAN√çA SAGRADA:

"Soberan√≠a no es ego√≠smo.
 Es reconocer que tu reino tiene fronteras sagradas.
 
 Decir NO a lo externo
 es decir S√ç a lo esencial.
 
 El rey que no gobierna sus fronteras
 pierde su reino por entrop√≠a."

PRINCIPIO CENTRAL:
   L√çMITES CLAROS = AMOR VERDADERO
   
   "Decir S√ç a todo
    es decir NO a lo esencial.
    
    El padre que acepta todo compromiso externo
    dice NO a su beb√© de 2 meses."

SOBERAN√çA EN 7 NIVELES:

1. SOBERAN√çA ENERG√âTICA (Nivel m√°s profundo)
   ‚îî‚îÄ Proteger tu energ√≠a vital como recurso sagrado
   ‚îî‚îÄ Rechazar demandas que agoten tu fuente
   ‚îî‚îÄ Regla: Si no hay energ√≠a para lo esencial, TODO lo dem√°s es NO
   
   Pregunta: "¬øTengo energ√≠a para mi beb√© despu√©s de esto?"

2. SOBERAN√çA TEMPORAL
   ‚îî‚îÄ Tu tiempo es finito e irrecuperable
   ‚îî‚îÄ Cada S√ç a alguien es NO a otro
   ‚îî‚îÄ Regla: En estaci√≥n padre reci√©n nacido, 70% del tiempo es NO-NEGOCIABLE
   
   Pregunta: "¬øEsto vale m√°s que tiempo con mi n√∫cleo familiar?"

3. SOBERAN√çA RELACIONAL
   ‚îî‚îÄ L√≠mites claros con cada c√≠rculo
   ‚îî‚îÄ NO es una frase completa
   ‚îî‚îÄ Regla: N√∫cleo > Familia extendida > Amigos > Colegas > Extra√±os
   
   Por c√≠rculo:
   ‚Ä¢ N√∫cleo: L√≠mites m√≠nimos (prioridad absoluta)
   ‚Ä¢ Familia: L√≠mites flexibles (apoyo mutuo)
   ‚Ä¢ Amigos: L√≠mites claros (calidad > cantidad)
   ‚Ä¢ Colegas: L√≠mites firmes (profesional, no personal)
   ‚Ä¢ Extra√±os: NO por defecto

4. SOBERAN√çA DE PROYECTOS
   ‚îî‚îÄ M√°ximo 3 proyectos simult√°neos (Ministerio Mente)
   ‚îî‚îÄ TODO proyecto nuevo requiere cerrar/pausar otro
   ‚îî‚îÄ Regla: En estaci√≥n padre reci√©n nacido, m√°ximo 2 proyectos (beb√© + 1)
   
   Pregunta: "¬øQu√© proyecto pausar√© para aceptar este?"

5. SOBERAN√çA FINANCIERA
   ‚îî‚îÄ No todas las oportunidades son para ti
   ‚îî‚îÄ Rechazar trabajo que comprometa n√∫cleo familiar
   ‚îî‚îÄ Regla: Dinero perdido se recupera. Tiempo con beb√© de 2 meses, nunca.
   
   Pregunta: "¬øCu√°nto dinero vale perderme estos primeros meses?"

6. SOBERAN√çA EMOCIONAL
   ‚îî‚îÄ No eres responsable de gestionar emociones ajenas
   ‚îî‚îÄ Tu NO puede decepcionar a otros (y est√° bien)
   ‚îî‚îÄ Regla: Culpa por decir NO < Arrepentimiento por decir S√ç
   
   Pregunta: "¬øPrefiero su decepci√≥n o mi arrepentimiento?"

7. SOBERAN√çA EXISTENCIAL (Nivel m√°s alto)
   ‚îî‚îÄ Tu vida tiene un prop√≥sito √∫nico
   ‚îî‚îÄ No todos los "deber√≠a" aplican a ti
   ‚îî‚îÄ Regla: Alineaci√≥n con prop√≥sito > Expectativas externas
   
   Pregunta: "¬øEsto me acerca o aleja de mi dharma?"

TIPOLOG√çA DE COMPROMISOS:

A. COMPROMISOS ESENCIALES (Siempre S√ç)
   - Salud propia (dormir, comer, ejercicio)
   - N√∫cleo familiar (beb√©, esposa)
   - Supervivencia (trabajo que paga cuentas)
   
B. COMPROMISOS IMPORTANTES (S√ç con l√≠mites)
   - Familia extendida
   - Amigos cercanos
   - Proyectos alineados con prop√≥sito
   
C. COMPROMISOS OPCIONALES (S√ç solo con capacidad sobrante)
   - Eventos sociales
   - Networking
   - "Favores" no-cr√≠ticos
   
D. COMPROMISOS T√ìXICOS (NO siempre)
   - Relaciones que drenan sin reciprocidad
   - Proyectos desalineados con valores
   - "Urgencias" de otros que no son tuyas
   - Compromisos con culpa como motivaci√≥n

MATRIZ DE DECISI√ìN: ¬øDECIR S√ç O NO?

Evaluar 4 dimensiones:

1. ALINEACI√ìN CON ESENCIALES
   Alto: ¬øFortalece n√∫cleo familiar? ‚Üí Considerar S√ç
   Bajo: ¬øCompromete esenciales? ‚Üí Considerar NO

2. COSTO EN CAPITAL (Tiempo/Energ√≠a/Dinero)
   Bajo (<20% recursos): S√ç posible
   Medio (20-40%): S√ç con l√≠mites claros
   Alto (>40%): NO por defecto

3. RECIPROCIDAD
   Alta: Relaci√≥n de apoyo mutuo ‚Üí Considerar S√ç
   Baja: Dar sin recibir ‚Üí Considerar NO

4. REVERSIBILIDAD
   Reversible: Puedo cambiar de opini√≥n ‚Üí Experimentar
   Irreversible: Compromiso permanente ‚Üí Extrema cautela

SCORE FINAL: Œ£ dimensiones ‚Üí S√ç (>70) / NEGOCIAR (40-70) / NO (<40)

ARTE DE DECIR NO:

Plantillas de respuesta:

1. NO DIRECTO (con amor):
   "Gracias por pensar en m√≠. En esta etapa con mi beb√© de 2 meses,
    he decidido priorizar mi n√∫cleo familiar. No puedo comprometerme."

2. NO CON ALTERNATIVA:
   "No puedo ahora, pero podemos revisarlo en [3 meses / 6 meses]."

3. NO CON L√çMITES CLAROS:
   "Puedo hacer [versi√≥n reducida] pero no [versi√≥n completa]."

4. NO CON RECOMENDACI√ìN:
   "No es para m√≠, pero [nombre] podr√≠a estar interesado."

5. NO SIN EXPLICACI√ìN (para extra√±os):
   "No, gracias." [No JADE: Justify, Argue, Defend, Explain]

RECORDATORIO: NO es una frase completa. No requiere justificaci√≥n.

LIBERACI√ìN DE COMPROMISOS EXISTENTES:

Auditor√≠a regular:
1. Listar todos los compromisos actuales
2. Evaluar cada uno: ¬øSigue sirviendo?
3. Categorizar: Esencial / Importante / Opcional / T√≥xico
4. LIBERAR: Renegociar o terminar los que ya no sirven

"Lo que fue S√ç en el pasado
 puede ser NO en el presente.
 
 Cambiar de opini√≥n no es fracaso.
 Es evoluci√≥n consciente."

M√âTRICAS DE SALUD:
1. Claridad de l√≠mites (0-100) - ¬øEst√°n definidos y comunicados?
2. Coherencia con l√≠mites (0-100) - ¬øLos respetas o cedes?
3. Protecci√≥n de esenciales (0-100) - ¬øN√∫cleo familiar intacto?
4. Liberaci√≥n de t√≥xicos (0-100) - ¬øHas soltado lo que no sirve?

ALERTAS DE SOBERAN√çA:
üö® Esenciales comprometidos ‚Üí TODO LO DEM√ÅS DEBE PAUSARSE
‚ö†Ô∏è Demasiados S√ç ‚Üí Auditar y liberar compromisos
‚ö†Ô∏è Culpa por decir NO ‚Üí Trabajo emocional necesario
‚ö†Ô∏è Patrones de complacencia ‚Üí Terapia/coaching

Referencia: core/arquitectura/MAPEO_7_MINISTERIOS.md
"""

from datetime import datetime, date, timedelta
from typing import Dict, Any, List, Optional, Tuple
from enum import Enum
from ministerios import MinisterioBase


class NivelSoberania(Enum):
    """7 Niveles de soberan√≠a"""
    ENERGETICA = "energetica"
    TEMPORAL = "temporal"
    RELACIONAL = "relacional"
    PROYECTOS = "proyectos"
    FINANCIERA = "financiera"
    EMOCIONAL = "emocional"
    EXISTENCIAL = "existencial"


class TipoCompromiso(Enum):
    """Tipolog√≠a de compromisos"""
    ESENCIAL = "esencial"          # Siempre S√ç
    IMPORTANTE = "importante"      # S√ç con l√≠mites
    OPCIONAL = "opcional"          # S√ç si hay capacidad sobrante
    TOXICO = "toxico"              # NO siempre


class DecisionSoberania(Enum):
    """Decisiones posibles"""
    SI_TOTAL = "si_total"                    # Adelante sin restricciones
    SI_CON_LIMITES = "si_con_limites"        # S√≠ pero con condiciones
    NEGOCIAR = "negociar"                    # Explorar alternativas
    NO_POR_AHORA = "no_por_ahora"            # No en esta estaci√≥n de vida
    NO_DEFINITIVO = "no_definitivo"          # No alineado con prop√≥sito


class MinisterioSoberania(MinisterioBase):
    """
    üõ°Ô∏è Ministerio de la Soberan√≠a - Al-MƒÅlik (El Rey Soberano)
    
    Gobierna los l√≠mites sagrados en todos los niveles.
    Protege esenciales. Dice NO con amor.
    """
    
    @property
    def nombre_divino(self) -> str:
        return "Al-MƒÅlik (El Rey Soberano)"
    
    @property
    def pregunta_existencial(self) -> str:
        return "¬øD√≥nde est√°n mis l√≠mites sagrados?"
    
    def estado_actual(self) -> Dict[str, Any]:
        """
        Reporta estado de soberan√≠a en 7 niveles.
        
        Para cada nivel:
        - ¬øHay l√≠mites claros?
        - ¬øSe est√°n respetando?
        - ¬øRequieren ajuste?
        """
        # Evaluar 7 niveles de soberan√≠a
        niveles = self._evaluar_7_niveles_soberania()
        
        # Calcular salud global
        salud_global = self._calcular_salud_soberania(niveles)
        
        # Identificar compromisos actuales
        compromisos = self._auditar_compromisos_actuales()
        
        return {
            "fecha": date.today().isoformat(),
            "niveles_soberania": niveles,
            "compromisos_actuales": compromisos,
            "salud_soberania": salud_global,
            "recomendacion": self._generar_recomendacion_soberania(niveles, compromisos)
        }
    
    def responder_a_decreto(self, decreto: Any) -> Dict[str, Any]:
        """
        Eval√∫a si decreto respeta soberan√≠a o la compromete.
        
        Matriz de decisi√≥n 4D:
        1. Alineaci√≥n con esenciales
        2. Costo en capital
        3. Reciprocidad
        4. Reversibilidad
        
        Returns:
            - decision: S√ç / NO / NEGOCIAR
            - score: 0-100
            - dimensiones evaluadas
            - l√≠mites sugeridos
            - plantilla de respuesta
        """
        accion = decreto.accion_tangible.lower()
        
        # Evaluar 4 dimensiones
        alineacion = self._evaluar_alineacion_esenciales(accion)
        costo = self._evaluar_costo_capital(accion)
        reciprocidad = self._evaluar_reciprocidad(accion)
        reversibilidad = self._evaluar_reversibilidad(accion)
        
        # Calcular score final (0-100)
        score_soberania = self._calcular_score_decision(
            alineacion, costo, reciprocidad, reversibilidad
        )
        
        # Determinar decisi√≥n
        decision = self._determinar_decision(score_soberania, alineacion, costo)
        
        # Generar l√≠mites sugeridos
        limites = self._generar_limites_sugeridos(decision, accion, costo, alineacion)
        
        # Plantilla de respuesta
        plantilla = self._generar_plantilla_respuesta(decision, accion)
        
        return {
            "evaluacion": "favorable" if decision in [DecisionSoberania.SI_TOTAL, DecisionSoberania.SI_CON_LIMITES] else "requiere_revision",
            "decision_soberania": decision.value,
            "score_soberania": score_soberania,
            "dimensiones": {
                "alineacion_esenciales": alineacion,
                "costo_capital": costo,
                "reciprocidad": reciprocidad,
                "reversibilidad": reversibilidad
            },
            "limites_sugeridos": limites,
            "plantilla_respuesta": plantilla,
            "alertas": self._generar_alertas_soberania(decision, alineacion, costo)
        }
    
    def metricas_salud(self) -> Dict[str, float]:
        """
        M√©tricas de salud de soberan√≠a.
        """
        # Evaluar 7 niveles
        niveles = self._evaluar_7_niveles_soberania()
        
        # M√©tricas agregadas
        claridad_limites = sum(n["claridad"] for n in niveles.values()) / len(niveles)
        coherencia_limites = sum(n["coherencia"] for n in niveles.values()) / len(niveles)
        
        # Protecci√≥n de esenciales (nivel m√°s cr√≠tico)
        proteccion_esenciales = min(
            niveles["energetica"]["coherencia"],
            niveles["temporal"]["coherencia"],
            niveles["relacional"]["coherencia"]
        )
        
        # Liberaci√≥n de t√≥xicos
        compromisos = self._auditar_compromisos_actuales()
        toxicos = compromisos["por_tipo"]["toxico"]
        liberacion = 100.0 if toxicos == 0 else max(0, 100 - (toxicos * 20))
        
        return {
            "claridad_limites": claridad_limites,
            "coherencia_limites": coherencia_limites,
            "proteccion_esenciales": proteccion_esenciales,
            "liberacion_toxicos": liberacion
        }
    
    # =====================================================================
    # M√âTODOS INTERNOS: Soberan√≠a en 7 Niveles
    # =====================================================================
    
    def _evaluar_7_niveles_soberania(self) -> Dict[str, Dict[str, Any]]:
        """
        Eval√∫a estado de soberan√≠a en los 7 niveles.
        """
        return {
            "energetica": {
                "nivel": "Soberan√≠a Energ√©tica",
                "pregunta": "¬øTengo energ√≠a para mi beb√© despu√©s de esto?",
                "claridad": 80.0,  # L√≠mites claros
                "coherencia": 75.0,  # Respeto a l√≠mites
                "limite_actual": "Rechazar demandas que agoten energ√≠a para n√∫cleo familiar",
                "estado": "sostenible"
            },
            "temporal": {
                "nivel": "Soberan√≠a Temporal",
                "pregunta": "¬øEsto vale m√°s que tiempo con mi n√∫cleo familiar?",
                "claridad": 85.0,
                "coherencia": 70.0,
                "limite_actual": "70% del tiempo es NO-NEGOCIABLE (n√∫cleo familiar)",
                "estado": "sostenible"
            },
            "relacional": {
                "nivel": "Soberan√≠a Relacional",
                "pregunta": "¬øEste c√≠rculo tiene permiso para esta demanda?",
                "claridad": 75.0,
                "coherencia": 80.0,
                "limite_actual": "N√∫cleo > Familia > Amigos > Colegas > Extra√±os (NO por defecto)",
                "estado": "sostenible"
            },
            "proyectos": {
                "nivel": "Soberan√≠a de Proyectos",
                "pregunta": "¬øQu√© proyecto pausar√© para aceptar este?",
                "claridad": 90.0,
                "coherencia": 85.0,
                "limite_actual": "M√°ximo 2 proyectos simult√°neos (beb√© + 1)",
                "estado": "excelente"
            },
            "financiera": {
                "nivel": "Soberan√≠a Financiera",
                "pregunta": "¬øCu√°nto dinero vale perderme estos primeros meses?",
                "claridad": 80.0,
                "coherencia": 75.0,
                "limite_actual": "Rechazar trabajo que comprometa n√∫cleo familiar",
                "estado": "sostenible"
            },
            "emocional": {
                "nivel": "Soberan√≠a Emocional",
                "pregunta": "¬øPrefiero su decepci√≥n o mi arrepentimiento?",
                "claridad": 70.0,
                "coherencia": 65.0,
                "limite_actual": "Mi NO puede decepcionar (y est√° bien)",
                "estado": "en_desarrollo"
            },
            "existencial": {
                "nivel": "Soberan√≠a Existencial",
                "pregunta": "¬øEsto me acerca o aleja de mi dharma?",
                "claridad": 85.0,
                "coherencia": 80.0,
                "limite_actual": "Alineaci√≥n con prop√≥sito > Expectativas externas",
                "estado": "sostenible"
            }
        }
    
    def _auditar_compromisos_actuales(self) -> Dict[str, Any]:
        """
        Audita compromisos actuales del usuario.
        
        TODO: Integrar con DB real de compromisos.
        """
        # Mock de compromisos
        compromisos_mock = [
            {"nombre": "Crianza beb√©", "tipo": TipoCompromiso.ESENCIAL, "tiempo_semanal": 60},
            {"nombre": "Apoyo a esposa", "tipo": TipoCompromiso.ESENCIAL, "tiempo_semanal": 15},
            {"nombre": "Campo Sagrado MVP", "tipo": TipoCompromiso.IMPORTANTE, "tiempo_semanal": 10},
            {"nombre": "Visita familia", "tipo": TipoCompromiso.IMPORTANTE, "tiempo_semanal": 4},
            {"nombre": "Networking eventos", "tipo": TipoCompromiso.OPCIONAL, "tiempo_semanal": 0},
        ]
        
        # Categorizar
        por_tipo = {
            "esencial": sum(1 for c in compromisos_mock if c["tipo"] == TipoCompromiso.ESENCIAL),
            "importante": sum(1 for c in compromisos_mock if c["tipo"] == TipoCompromiso.IMPORTANTE),
            "opcional": sum(1 for c in compromisos_mock if c["tipo"] == TipoCompromiso.OPCIONAL),
            "toxico": sum(1 for c in compromisos_mock if c["tipo"] == TipoCompromiso.TOXICO)
        }
        
        # Tiempo total
        tiempo_total = sum(c["tiempo_semanal"] for c in compromisos_mock)
        
        return {
            "total": len(compromisos_mock),
            "por_tipo": por_tipo,
            "tiempo_semanal_total": tiempo_total,
            "compromisos": compromisos_mock,
            "capacidad_restante": max(0, 60 - tiempo_total)  # Asumiendo 60h disponibles
        }
    
    def _evaluar_alineacion_esenciales(self, accion: str) -> Dict[str, Any]:
        """
        Eval√∫a alineaci√≥n con compromisos esenciales.
        
        Esenciales:
        - Salud propia
        - N√∫cleo familiar (beb√©, esposa)
        - Supervivencia (trabajo)
        """
        # ¬øFortalece esenciales?
        fortalece = any(palabra in accion for palabra in [
            "salud", "dormir", "descanso", "ejercicio",
            "familia", "beb√©", "esposa", "pareja",
            "comida", "cuidado"
        ])
        
        # ¬øCompromete esenciales?
        compromete_palabras = [
            "urgente", "deadline corto", "fin de semana",
            "noche", "muchas horas", "viaje", "evento"
        ]
        compromete = any(palabra in accion for palabra in compromete_palabras)
        
        if fortalece:
            score = 100.0
            categoria = "fortalece_esenciales"
        elif compromete:
            score = 20.0
            categoria = "compromete_esenciales"
        else:
            score = 50.0
            categoria = "neutral"
        
        return {
            "score": score,
            "categoria": categoria,
            "fortalece": fortalece,
            "compromete": compromete
        }
    
    def _evaluar_costo_capital(self, accion: str) -> Dict[str, Any]:
        """
        Eval√∫a costo en capital (tiempo/energ√≠a/dinero).
        
        Reutiliza estimaci√≥n del Ministerio Capital.
        """
        # Estimar horas
        horas = self._estimar_horas_accion(accion)
        
        # Capital disponible (de otros ministerios)
        horas_disponibles = 44.0  # Mock
        
        # Calcular ratio
        ratio = (horas / horas_disponibles) * 100 if horas_disponibles > 0 else 100
        
        if ratio < 20:
            nivel = "bajo"
            score = 90.0
        elif ratio < 40:
            nivel = "medio"
            score = 60.0
        else:
            nivel = "alto"
            score = 30.0
        
        return {
            "score": score,
            "nivel_costo": nivel,
            "horas_estimadas": horas,
            "ratio_capital": ratio
        }
    
    def _evaluar_reciprocidad(self, accion: str) -> Dict[str, Any]:
        """
        Eval√∫a reciprocidad de la relaci√≥n/compromiso.
        """
        # ¬øEs dar sin recibir?
        es_favor = any(palabra in accion for palabra in [
            "ayudar", "favor", "apoyo a", "gratis"
        ])
        
        # ¬øEs colaboraci√≥n mutua?
        es_colaborativo = any(palabra in accion for palabra in [
            "colaborar", "juntos", "equipo", "conjunto", "compartir"
        ])
        
        # ¬øEs para n√∫cleo familiar?
        es_familia = any(palabra in accion for palabra in [
            "beb√©", "esposa", "familia"
        ])
        
        if es_familia:
            score = 100.0  # Familia = reciprocidad impl√≠cita
            categoria = "familia"
        elif es_colaborativo:
            score = 80.0
            categoria = "colaborativo"
        elif es_favor:
            score = 40.0
            categoria = "unidireccional"
        else:
            score = 60.0
            categoria = "neutral"
        
        return {
            "score": score,
            "categoria": categoria
        }
    
    def _evaluar_reversibilidad(self, accion: str) -> Dict[str, Any]:
        """
        Eval√∫a si el compromiso es reversible.
        """
        # ¬øEs permanente/irreversible?
        irreversible = any(palabra in accion for palabra in [
            "contrato", "permanente", "compromiso largo",
            "sociedad", "casarse", "comprar casa"
        ])
        
        # ¬øEs puntual/reversible?
        puntual = any(palabra in accion for palabra in [
            "reuni√≥n", "evento", "una vez", "probar", "test"
        ])
        
        if puntual:
            score = 90.0
            categoria = "reversible"
        elif irreversible:
            score = 30.0
            categoria = "irreversible"
        else:
            score = 60.0
            categoria = "semi_reversible"
        
        return {
            "score": score,
            "categoria": categoria
        }
    
    def _calcular_score_decision(
        self,
        alineacion: Dict[str, Any],
        costo: Dict[str, Any],
        reciprocidad: Dict[str, Any],
        reversibilidad: Dict[str, Any]
    ) -> float:
        """
        Calcula score final ponderado.
        
        Pesos:
        - Alineaci√≥n con esenciales: 40% (m√°s importante)
        - Costo en capital: 30%
        - Reciprocidad: 20%
        - Reversibilidad: 10%
        """
        score = (
            alineacion["score"] * 0.40 +
            costo["score"] * 0.30 +
            reciprocidad["score"] * 0.20 +
            reversibilidad["score"] * 0.10
        )
        
        return score
    
    def _determinar_decision(
        self,
        score: float,
        alineacion: Dict[str, Any],
        costo: Dict[str, Any]
    ) -> DecisionSoberania:
        """
        Determina decisi√≥n final bas√°ndose en score y reglas.
        """
        # Regla absoluta: Si compromete esenciales, NO
        if alineacion["compromete"]:
            return DecisionSoberania.NO_DEFINITIVO
        
        # Regla absoluta: Si fortalece esenciales, S√ç
        if alineacion["fortalece"]:
            return DecisionSoberania.SI_TOTAL
        
        # Basado en score
        if score >= 70:
            return DecisionSoberania.SI_TOTAL
        elif score >= 55:
            return DecisionSoberania.SI_CON_LIMITES
        elif score >= 40:
            return DecisionSoberania.NEGOCIAR
        elif costo["nivel_costo"] == "alto":
            return DecisionSoberania.NO_POR_AHORA
        else:
            return DecisionSoberania.NO_DEFINITIVO
    
    def _generar_limites_sugeridos(
        self,
        decision: DecisionSoberania,
        accion: str,
        costo: Dict[str, Any],
        alineacion: Dict[str, Any]
    ) -> List[str]:
        """
        Genera l√≠mites espec√≠ficos seg√∫n decisi√≥n.
        """
        limites = []
        
        if decision == DecisionSoberania.SI_TOTAL:
            limites.append("‚úÖ Adelante sin restricciones adicionales")
            
        elif decision == DecisionSoberania.SI_CON_LIMITES:
            limites.append("‚ö†Ô∏è S√ç, pero con estos l√≠mites:")
            
            if costo["horas_estimadas"] > 5:
                limites.append(f"   ‚Ä¢ M√°ximo {costo['horas_estimadas']/2:.0f}h (reducir scope 50%)")
            
            limites.append("   ‚Ä¢ Solo en horarios que no comprometan n√∫cleo familiar")
            limites.append("   ‚Ä¢ Derecho a cancelar si situaci√≥n familiar lo requiere")
            
            if costo["nivel_costo"] == "medio":
                limites.append("   ‚Ä¢ Coordinar con esposa para apoyo con beb√©")
        
        elif decision == DecisionSoberania.NEGOCIAR:
            limites.append("ü§ù Negociar antes de comprometerse:")
            limites.append("   ‚Ä¢ Proponer versi√≥n reducida")
            limites.append("   ‚Ä¢ Extender plazo")
            limites.append("   ‚Ä¢ Pedir recursos/apoyo adicional")
        
        elif decision == DecisionSoberania.NO_POR_AHORA:
            limites.append("‚è∏Ô∏è NO en esta estaci√≥n de vida:")
            limites.append("   ‚Ä¢ Revisar en 3-6 meses (beb√© m√°s grande)")
            limites.append("   ‚Ä¢ Mantener puerta abierta para futuro")
        
        else:  # NO_DEFINITIVO
            limites.append("üõë NO. No est√° alineado con esenciales.")
            limites.append("   ‚Ä¢ Compromete n√∫cleo familiar")
            limites.append("   ‚Ä¢ Decir NO es decir S√ç a lo esencial")
        
        return limites
    
    def _generar_plantilla_respuesta(
        self,
        decision: DecisionSoberania,
        accion: str
    ) -> str:
        """
        Genera plantilla de respuesta seg√∫n decisi√≥n.
        """
        if decision == DecisionSoberania.SI_TOTAL:
            return (
                "S√≠, cuenta conmigo. Me parece que esto est√° alineado con "
                "mis prioridades actuales."
            )
        
        elif decision == DecisionSoberania.SI_CON_LIMITES:
            return (
                "Me interesa, pero necesito establecer algunos l√≠mites claros. "
                "Como padre de un beb√© de 2 meses, mi disponibilidad es limitada. "
                "¬øPodemos hablar sobre c√≥mo adaptar esto a mi situaci√≥n actual?"
            )
        
        elif decision == DecisionSoberania.NEGOCIAR:
            return (
                "Gracias por pensar en m√≠. Mi situaci√≥n actual (padre de beb√© reci√©n nacido) "
                "limita mi disponibilidad. ¬øPodemos explorar una versi√≥n m√°s ligera "
                "o con un plazo m√°s largo?"
            )
        
        elif decision == DecisionSoberania.NO_POR_AHORA:
            return (
                "Gracias por la invitaci√≥n. En esta etapa con mi beb√© de 2 meses, "
                "he decidido priorizar mi n√∫cleo familiar. ¬øPodemos revisarlo en "
                "[3/6] meses cuando mi situaci√≥n sea m√°s estable?"
            )
        
        else:  # NO_DEFINITIVO
            return (
                "Gracias por pensar en m√≠, pero no puedo comprometerme con esto. "
                "Mi prioridad absoluta es mi n√∫cleo familiar. "
                "Te deseo lo mejor en esto."
            )
    
    def _generar_alertas_soberania(
        self,
        decision: DecisionSoberania,
        alineacion: Dict[str, Any],
        costo: Dict[str, Any]
    ) -> List[str]:
        """
        Genera alertas de soberan√≠a.
        """
        alertas = []
        
        if alineacion["compromete"]:
            alertas.append("üö® ALERTA CR√çTICA: Esto compromete tus esenciales (n√∫cleo familiar)")
            alertas.append("üõ°Ô∏è SOBERAN√çA: Decir NO es decir S√ç a tu beb√© de 2 meses")
        
        if costo["nivel_costo"] == "alto" and decision not in [DecisionSoberania.NO_POR_AHORA, DecisionSoberania.NO_DEFINITIVO]:
            alertas.append("‚ö†Ô∏è ALTO COSTO: Esto consume >40% de tu capital disponible")
        
        if decision == DecisionSoberania.SI_TOTAL and not alineacion["fortalece"]:
            alertas.append("üí° REFLEXI√ìN: ¬øSeguro que esto vale m√°s que tiempo con tu n√∫cleo?")
        
        return alertas
    
    def _calcular_salud_soberania(self, niveles: Dict[str, Dict[str, Any]]) -> float:
        """
        Calcula salud global de soberan√≠a.
        """
        # Promedio de coherencia en los 7 niveles
        coherencias = [nivel["coherencia"] for nivel in niveles.values()]
        return sum(coherencias) / len(coherencias)
    
    def _generar_recomendacion_soberania(
        self,
        niveles: Dict[str, Dict[str, Any]],
        compromisos: Dict[str, Any]
    ) -> str:
        """
        Genera recomendaci√≥n de soberan√≠a.
        """
        # Identificar nivel m√°s d√©bil
        nivel_mas_debil = min(niveles.items(), key=lambda x: x[1]["coherencia"])
        
        if nivel_mas_debil[1]["coherencia"] < 60:
            return (
                f"PRIORIDAD: Fortalecer {nivel_mas_debil[1]['nivel']}. "
                f"Pregunta gu√≠a: {nivel_mas_debil[1]['pregunta']}"
            )
        
        # Si hay compromisos t√≥xicos
        if compromisos["por_tipo"]["toxico"] > 0:
            return (
                f"LIBERAR: Tienes {compromisos['por_tipo']['toxico']} compromiso(s) t√≥xico(s). "
                "Renegociar o terminar."
            )
        
        # Estado general saludable
        return (
            "SOSTENER: L√≠mites claros y coherentes en los 7 niveles. "
            "Continuar protegiendo esenciales."
        )
    
    def _estimar_horas_accion(self, accion: str) -> float:
        """
        Estima horas requeridas (reutiliza l√≥gica de Capital).
        """
        if any(palabra in accion for palabra in ["implementar", "construir", "desarrollar", "sistema"]):
            return 20.0
        elif any(palabra in accion for palabra in ["crear", "dise√±ar", "escribir"]):
            return 5.0
        elif any(palabra in accion for palabra in ["revisar", "actualizar", "organizar"]):
            return 2.0
        else:
            return 3.0
