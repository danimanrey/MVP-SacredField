# ðŸ•Œ MVP Campo Sagrado - ImplementaciÃ³n Completa

## ESTRUCTURA GENERAL DEL MVP

Este MVP integra **TODA** la especificaciÃ³n anterior en un sistema funcional y ejecutable.

### Componentes Core

```
campo-sagrado/
â”œâ”€â”€ backend/                    # FastAPI + Python
â”‚   â”œâ”€â”€ api/                   # Endpoints REST
â”‚   â”‚   â”œâ”€â”€ main.py           # App principal
â”‚   â”‚   â”œâ”€â”€ estado_cero.py    # Endpoints Estado Cero
â”‚   â”‚   â”œâ”€â”€ orquestador.py    # Endpoints Orquestador
â”‚   â”‚   â””â”€â”€ guardian.py       # Endpoints Guardian
â”‚   â”œâ”€â”€ agentes/              # Los 4 agentes
â”‚   â”‚   â”œâ”€â”€ estado_cero.py    # Agente Orientador Sacral
â”‚   â”‚   â”œâ”€â”€ orquestador.py    # Agente Maestro SinfonÃ­a
â”‚   â”‚   â”œâ”€â”€ guardian.py       # Agente Vigilante
â”‚   â”‚   â””â”€â”€ documentador.py   # Agente Archivista
â”‚   â”œâ”€â”€ services/             # Servicios core
â”‚   â”‚   â”œâ”€â”€ tiempos_liturgicos.py    # CÃ¡lculo tiempos rezo
â”‚   â”‚   â”œâ”€â”€ calendario_hijri.py      # Sistema 13 meses
â”‚   â”‚   â”œâ”€â”€ contexto.py              # RecopilaciÃ³n contexto
â”‚   â”‚   â””â”€â”€ claude_client.py         # Cliente Anthropic
â”‚   â”œâ”€â”€ models/               # Modelos de datos
â”‚   â”‚   â”œâ”€â”€ schemas.py        # Pydantic schemas
â”‚   â”‚   â””â”€â”€ database.py       # SQLite + ORM
â”‚   â”œâ”€â”€ integraciones/        # Integraciones externas
â”‚   â”‚   â”œâ”€â”€ obsidian.py       # Vault Obsidian
â”‚   â”‚   â””â”€â”€ anytype.py        # Anytype API
â”‚   â””â”€â”€ scripts/              # Scripts utilidad
â”‚       â”œâ”€â”€ init_db.py        # Inicializar BD
â”‚       â”œâ”€â”€ start_agentes.py  # Iniciar agentes
â”‚       â””â”€â”€ calcular_tiempos.py
â”‚
â”œâ”€â”€ frontend/                  # SvelteKit + TypeScript
â”‚   â”œâ”€â”€ src/
â”‚   â”‚   â”œâ”€â”€ routes/           # PÃ¡ginas
â”‚   â”‚   â”‚   â”œâ”€â”€ +page.svelte              # Dashboard principal
â”‚   â”‚   â”‚   â”œâ”€â”€ estado-cero/
â”‚   â”‚   â”‚   â”‚   â””â”€â”€ +page.svelte          # Interfaz Estado Cero
â”‚   â”‚   â”‚   â”œâ”€â”€ espejo-diario/
â”‚   â”‚   â”‚   â”‚   â””â”€â”€ +page.svelte          # Espejo del dÃ­a
â”‚   â”‚   â”‚   â”œâ”€â”€ vista-semanal/
â”‚   â”‚   â”‚   â”‚   â””â”€â”€ +page.svelte          # Vista semanal
â”‚   â”‚   â”‚   â””â”€â”€ vista-anual/
â”‚   â”‚   â”‚       â””â”€â”€ +page.svelte          # Vista anual
â”‚   â”‚   â”œâ”€â”€ lib/
â”‚   â”‚   â”‚   â”œâ”€â”€ components/   # Componentes UI
â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ EstadoCero/
â”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ VerificacionMomento.svelte
â”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ ContextoDisplay.svelte
â”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ ConsultaSacral.svelte
â”‚   â”‚   â”‚   â”‚   â”‚   â””â”€â”€ ChatClarificador.svelte
â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ EspejoDiario/
â”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ JornadaCaos.svelte
â”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ NoNegociables.svelte
â”‚   â”‚   â”‚   â”‚   â”‚   â””â”€â”€ ChatbotAclaraciones.svelte
â”‚   â”‚   â”‚   â”‚   â””â”€â”€ Shared/
â”‚   â”‚   â”‚   â”‚       â”œâ”€â”€ GeometriaSagrada.svelte
â”‚   â”‚   â”‚   â”‚       â””â”€â”€ TiempoLiturgico.svelte
â”‚   â”‚   â”‚   â”œâ”€â”€ stores/       # Svelte stores
â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ tiempo.ts
â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ estadoCero.ts
â”‚   â”‚   â”‚   â”‚   â””â”€â”€ jornada.ts
â”‚   â”‚   â”‚   â””â”€â”€ api/          # Cliente API
â”‚   â”‚   â”‚       â””â”€â”€ client.ts
â”‚   â”‚   â””â”€â”€ app.css           # Estilos globales
â”‚   â””â”€â”€ static/               # Assets estÃ¡ticos
â”‚
â”œâ”€â”€ config/
â”‚   â””â”€â”€ campo-sagrado.yaml    # ConfiguraciÃ³n completa
â”‚
â”œâ”€â”€ storage/                   # Datos persistentes
â”‚   â”œâ”€â”€ organismo.db          # SQLite
â”‚   â””â”€â”€ chroma_db/            # Vector DB
â”‚
â”œâ”€â”€ docs/                      # DocumentaciÃ³n
â”‚   â”œâ”€â”€ ESPECIFICACION_COMPLETA.md
â”‚   â”œâ”€â”€ IMPLEMENTACION_MVP.md
â”‚   â””â”€â”€ GUIA_USO.md
â”‚
â””â”€â”€ scripts/                   # Scripts setup
    â”œâ”€â”€ setup-completo.sh     # Setup todo el sistema
    â”œâ”€â”€ iniciar-sistema.sh    # Iniciar todo
    â””â”€â”€ verificar-salud.sh    # Health check
```

## ORDEN DE IMPLEMENTACIÃ“N

### Fase 1: FundaciÃ³n (1-2 horas)
1. **Estructura del proyecto** - `setup-completo.sh`
2. **Backend base** - FastAPI + dependencias
3. **Base de datos** - SQLite con todas las tablas
4. **Servicios core** - Tiempos litÃºrgicos + Calendario Hijri

### Fase 2: Agentes (2-3 horas)
5. **Agente Estado Cero** - Consulta sacral completa
6. **Agente Orquestador** - Plan emergente + tracking
7. **Agente Guardian** - Monitoreo + reportes
8. **Agente Documentador** - GeneraciÃ³n memoria

### Fase 3: API (1 hora)
9. **Endpoints Estado Cero** - CRUD + consulta
10. **Endpoints Orquestador** - Plan + chat
11. **Endpoints Guardian** - Salud + mÃ©tricas
12. **WebSockets** - Updates en tiempo real

### Fase 4: Frontend (3-4 horas)
13. **Interfaz Estado Cero** - Completa con geometrÃ­a sagrada
14. **Espejo Diario** - Jornada caos + chatbot
15. **Vista Semanal** - No-negociables + progreso
16. **Vista Anual** - Ciclo 13 meses + intenciones

### Fase 5: Integraciones (1 hora)
17. **Obsidian** - Escritura automÃ¡tica vault
18. **Anytype** - Captura con propÃ³sito (preparado)

### Fase 6: AutomatizaciÃ³n (30 min)
19. **Scripts inicio** - Levantar todo el sistema
20. **Monitoreo** - Health checks automÃ¡ticos

## ARCHIVOS A CREAR (55 archivos)

Voy a generar cada uno numerado secuencialmente:

### Backend (25 archivos)
- `01_backend_requirements.txt`
- `02_backend_pyproject.toml`
- `03_backend_env_example`
- `04_models_schemas.py`
- `05_models_database.py`
- `06_services_tiempos_liturgicos.py`
- `07_services_calendario_hijri.py`
- `08_services_contexto.py`
- `09_services_claude_client.py`
- `10_agentes_estado_cero.py`
- `11_agentes_orquestador.py`
- `12_agentes_guardian.py`
- `13_agentes_documentador.py`
- `14_api_main.py`
- `15_api_estado_cero.py`
- `16_api_orquestador.py`
- `17_api_guardian.py`
- `18_api_websockets.py`
- `19_integraciones_obsidian.py`
- `20_integraciones_anytype.py`
- `21_scripts_init_db.py`
- `22_scripts_start_agentes.py`
- `23_scripts_calcular_tiempos.py`
- `24_scripts_test_sistema.py`
- `25_scripts_seed_data.py`

### Frontend (20 archivos)
- `26_frontend_package.json`
- `27_frontend_svelte_config.js`
- `28_frontend_vite_config.ts`
- `29_frontend_app_css`
- `30_lib_api_client.ts`
- `31_lib_stores_tiempo.ts`
- `32_lib_stores_estadoCero.ts`
- `33_lib_stores_jornada.ts`
- `34_components_EstadoCero_VerificacionMomento.svelte`
- `35_components_EstadoCero_ContextoDisplay.svelte`
- `36_components_EstadoCero_ConsultaSacral.svelte`
- `37_components_EstadoCero_ChatClarificador.svelte`
- `38_components_EspejoDiario_JornadaCaos.svelte`
- `39_components_EspejoDiario_NoNegociables.svelte`
- `40_components_EspejoDiario_ChatbotAclaraciones.svelte`
- `41_components_Shared_GeometriaSagrada.svelte`
- `42_components_Shared_TiempoLiturgico.svelte`
- `43_routes_page.svelte`
- `44_routes_estado_cero_page.svelte`
- `45_routes_espejo_diario_page.svelte`

### ConfiguraciÃ³n y Scripts (10 archivos)
- `46_config_campo_sagrado.yaml`
- `47_scripts_setup_completo.sh`
- `48_scripts_iniciar_sistema.sh`
- `49_scripts_detener_sistema.sh`
- `50_scripts_verificar_salud.sh`
- `51_docs_ESPECIFICACION_COMPLETA.md` (ya lo tienes)
- `52_docs_IMPLEMENTACION_MVP.md`
- `53_docs_GUIA_USO.md`
- `54_README.md`
- `55_gitignore`

## FLUJO DE EJECUCIÃ“N INMEDIATA

Una vez implementado:

```bash
# 1. Setup inicial (solo primera vez)
./scripts/setup-completo.sh

# 2. Configurar API key
nano backend/.env
# Agregar: ANTHROPIC_API_KEY=tu_key

# 3. Inicializar base de datos
cd backend
source venv/bin/activate
python scripts/init_db.py

# 4. Calcular tiempos de hoy
python scripts/calcular_tiempos.py

# 5. Iniciar sistema completo (3 terminales o tmux)
./scripts/iniciar-sistema.sh

# O manualmente:
# Terminal 1: Backend
cd backend && source venv/bin/activate && python api/main.py

# Terminal 2: Frontend  
cd frontend && pnpm dev

# Terminal 3: Agentes
cd backend && source venv/bin/activate && python scripts/start_agentes.py
```

Sistema estarÃ¡ en: **http://localhost:5173**

## EXPERIENCIA DE USUARIO INMEDIATA

Al abrir la app:

1. **Dashboard principal** muestra:
   - Momento litÃºrgico actual
   - PrÃ³ximo Estado Cero (con countdown)
   - Estado del dÃ­a (no-negociables, sesiones)
   
2. **Si es momento de Estado Cero**:
   - BotÃ³n "âœ¨ Iniciar Estado Cero" aparece
   - Click â†’ inicia consulta sacral completa
   - 6 preguntas binarias
   - Sentir 15seg cada una
   - Chat clarificador
   - Resultado: acciÃ³n tangible
   
3. **Espejo Diario**:
   - Jornada al borde del caos (visual no-lineal)
   - No-negociables con tracking
   - Chatbot para aclaraciones
   
4. **Al final del dÃ­a** (Maghrib):
   - Guardian genera reporte automÃ¡tico
   - Aparece en Obsidian
   - Muestra resumen del dÃ­a

## INTEGRACIÃ“N CON DOCUMENTOS ANTERIORES

Este MVP implementa:

âœ… **Calendario Hijri 13 meses** con solsticios/equinoccios  
âœ… **DÃ­a comienza en Maghrib** (19:00 aprox)  
âœ… **5 Estados Cero diarios** en ventanas exactas  
âœ… **Consulta Sacral** con preguntas binarias + chat  
âœ… **4 Agentes**: Estado Cero, Orquestador, Guardian, Documentador  
âœ… **Jornada al borde del caos** con 40% emergencia  
âœ… **No-negociables** biolÃ³gicos/espirituales/financieros  
âœ… **Espejo Diario** (no calendario)  
âœ… **Vistas Semanal/Anual** con intenciones  
âœ… **IntegraciÃ³n Obsidian** para documentaciÃ³n  
âœ… **Captura Anytype** con propÃ³sito (preparado)  
âœ… **Sistema evolutivo** que aprende del uso

## PRÃ“XIMOS PASOS

Voy a generar ahora todos los 55 archivos en orden secuencial.

Â¿Quieres que:
1. **Genere TODOS los archivos ahora** (en mÃºltiples artifacts)
2. **Genere por fases** (Fase 1 completa, luego Fase 2, etc.)
3. **Genere archivos especÃ­ficos** que quieras revisar primero

Â¿CÃ³mo prefieres proceder?
